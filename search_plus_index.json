{"./":{"url":"./","title":"Introduction","keywords":"","body":" Introduction 考试科目1:信息系统综合知识 上午9:00-11:30 150min 考试科目2:系统架构设计案例分析 下午13:30-15:00 90min 考试科目3:系统架构设计论文 下午15:20-17:20 120min 2021-11时间表 Introduction [toc] 本文档为2018年lisahust为软考架构设计师做的笔记。【2021继续更新啦～】 可惜没考过😭，今年【2021-11】也要继续加油啦！冲鸭～ 一起努力吧💪 网站阅读指路 notebook_web/ 架构设计师：副高级职称 考试时间：11月6日 我把架构的知识章节分为以下四部分： Part1: 基础: 计算机组成原理与体系结构、系统配置与性能评价、操作系统基本原理、数据库系统、计算机网络基础 7月 Part2: 架构: 企业信息化战略与实施、软件工程、项目管理、软件架构设计 8月 Part3: 进阶: 系统安全分析与设计、系统可靠性分析与设计 9月 Part4: 其他: 法律法规与标准化知识、数学与经济管理、专业英语 8月 10月用来专门弄论文&刷题 考试科目1:信息系统综合知识 上午9:00-11:30 150min 计算机软件与网络基础知识 信息化基础知识：信息系统基础信息 系统开发基础知识：开发管理/测试评审方法/系统分析与设计方法/开发方法 软件架构基础知识：软件架构设计/基于中间件的开发/嵌入式系统设计/设计模式 安全性与可靠性技术：安全性和保密性设计/系统的可靠性分析与设计 标准化与知识产权 应用数学 专业英语 单选题（75道） 满分75分 合格标准45分 各个知识点都要逐个击破，混合练习。 真题分析后，常见的考点为： 1. 计算机组成与体系结构/操作系统/数据库系统/计算机网络【数据库很重要】平均4分左右 2. 信息系统基础信息 3. 开发管理/测试评审方法/系统分析与设计方法/开发方法 4. 软件架构设计/基于中间件的开发/嵌入式系统设计/设计模式 5. 安全性和保密性设计/系统的可靠性分析与设计 6. 知识产权 考试科目2:系统架构设计案例分析 下午13:30-15:00 90min 系统规划 软件架构设计 设计模式 系统设计 软件系统建模 分布式系统设计 嵌入式系统设计 系统的可靠性分析与设计 系统的安全性和保密性设计 满分75分 5道大题，选做3题。第一道必答，后4道选2道。 合格标准45分 真题分析后，常见的考点为： 1. 软件质量属性。该题通常放在第一题，需要背熟常见的质量属性，并且需要在真实场景冲分辨是哪个质量属性。 2. 软件系统设计建模（面向对象系统建模）。需要掌握状态图、系统图、用例图和类图的画法。 3. 结构化系统建模方法。需要掌握数据流图和流程图的画法和意义。 考试科目3:系统架构设计论文 下午15:20-17:20 120min 系统建模 软件架构设计 系统设计 分布式系统设计 系统的可靠性分析与设计 系统的安全性和保密性设计 四道论文题选一道题即可 满分75分 合格45分 论文需要练出3篇合格的文章。 真题分析后，常见的考点为： 2021-11时间表 时间 计划 每日计划 早上1h 晚上1h 周末4h 20210621-week1 公共基础：计算机组成与体系结构/系统配置与性能评价✌️ 20210628-week2 公共基础：操作系统✌️ 20210705-week3 公共基础：数据库系统✌️ 刷题：计算机组成与体系结构✌️ 20210712-week4 公共基础：计算机网络✌️ 刷题：操作系统✌️ 20210719-week5 其他基础：数学与经济管理✌️ 刷题：数据库系统✌️ 20210726-week6 其他基础：知识产权与标准化✌️ 刷题：计算机网络✌️ 20210802-week7 架构基础：企业信息化✌️ 20210809-week8 架构基础：软件工程✌️ 20210816-week9 架构基础：软件架构设计✌️ 20210823-week10 架构基础：项目管理✌️ 20210830-week11 进阶基础：系统安全分析与设计&系统可靠性分析与设计✌️ 20210906-week12 论文论文论文 20210913-week13 论文论文论文 20210920-week14 论文论文论文 20210927-week15 刷题冲刺 20211004-week16 刷题冲刺 20211011-week17 刷题冲刺 20211018-week18 刷题冲刺 20211025-week19 刷题冲刺 20211101-week20 下半年考试报名时间为2021-08-30 10:00－09-07 16:00。中国计算机技术职业资格网（www.ruankao.org.cn）2021年11月6日考试 课程 2021-06-24 1.开学典礼✌️2021-07-06 2.计算机组成与体系结构1✌️2021-07-13 3.计算机组成与体系结构2✌️2021-07-15 4.操作系统1✌️2021-07-20 5.操作系统2✌️2021-07-22 6.数据库系统1✌️2021-07-27 7.数据库系统2✌️2021-07-29 8.（案例1）数据库系统✌️2021-08-03 9.计算机网络✌️2021-08-04 10.论文写作✌️2021-08-05 11.数学与经济管理✌️2021-08-10 计算机网络✌️系统配置与性能评价+知识产权与标准化✌️2021-08-17 13.阶段测试讲解✌️2021-08-24 企业信息化战略与实施✌️2021-08-25 论文写作主题篇✌️2021-08-26 软件工程1✌️2021-08-31 软件工程2✌️2021-09-02 案例1（案例技巧与软件工程）✌️2021-09-04 软件架构设计✌️2021-09-07 软件架构设计✌️2021-09-09 19:30-21:30 架构论文专题+案例2（架构设计）1✌️2021-09-14 案例特训专题2（架构设计）2✌️2021-09-15 论文写作2021-09-16 系统安全分析与设计+系统可靠性分析与设计✌️2021-09-23 项目管理✌️2021-09-28 案例特训专题（其他 案例特训专题3（其他）2021-09-30 案例特训数据库2021-10-08 论文写作 年份 综合知识 案例分析 论文 2009 ✌️ 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-10 13:09:44 "},"2021-11/01计算机组成原理与体系结构.html":{"url":"2021-11/01计算机组成原理与体系结构.html","title":"01计算机组成原理与体系结构","keywords":"","body":" 计算机组成原理与体系结构 Flynn分类法 Flynn分类法 CISC与RISC🌟 CISC与RISC 存储系统🌟🌟🌟 冯·诺依曼结构 哈佛结构 层次化存储结构 存储器分类 磁盘结构与参数 磁盘调度算法 流水线技术🌟 流水线 总线 嵌入式系统🌟 芯片 嵌入式系统初始化过程 校验码 校验方法 计算机组成原理与体系结构 [toc] 整个章节4-5分 学好高频考点即可 1. Flynn分类法 2. CISC与RISC 3. 存储系统：分级存储体系、Cache、主存/内存、磁盘结构与参数 4. 总线系统：总线分类、总线特点 5. 流水线 6. 检验码 7. 嵌入式系统开发设计 Flynn分类法 架构没有考到，但是系分出现过，所以还是介绍一下 Flynn分类法 体系结构类型 结构 关键特性 代表 SISD单指令流单数据流 控制部分：一个处理器：一个主存模块：一个 单处理器系统 SIMD单指令流多数据流 控制部分：一个处理器：多个主存模块：多个 并行处理机、阵列处理机、超级向量处理机 MISD多指令流多数据流 控制部分：多个处理器：一个主存模块：多个 不实际 目前没有，文献中有 MIMD多指令多数据流 控制部分：多个处理器：多个主存模块：多个 多处理机系统、多计算机 CISC与RISC🌟 考了2-3次，只要区分结构特点就行了，上午题 CISC与RISC CISC：复杂指令集计算机 Complex Instrcution Set Computers RISC：精简指令集计算机 Reduced Instruction Set Computers 指令系统类型 指令 寻址方式 实现方式 其他 CISC-复杂 数量多，使用频率差别大，可变长格式 支持多种 微程序控制技术 研制周期长 RISC-精简 数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器，只有Load/Store操作内存 支持方式少 增加了通用寄存器；应不限逻辑控制为主；适合采用流水线 优化编译，有效支持多种语言 存储系统🌟🌟🌟 重点为磁盘调度算法，存储单元 冯·诺依曼结构 一种将程序指令存储器和数据存储器合并在一起的存储器结构。 一般用于PC处理器，如I3，I5，I7处理器 指令与数据存储器合并在一起 指令与数据都通过相同的数据总线传输 哈佛结构 一种将程序指令存储和数据存储分开的存储器结构。 一般用于嵌入式系统处理器DSP(数据信号处理) 指令与数据分开存储，可以并行读取，有较高数据的吞吐率 有4条总线：指令和数据的数据总线与地址总线 层次化存储结构 快->慢：CPU寄存器、Cache、内存(主存)、外存(辅存) 局部性原理：访问数据有局部性原理，故可以使用层次化存储结构。 存储器分类 name eg 随机存取存储器RAM-Random Access Memory DRAM-动态存储器 SRAM-静态存储器 只读存储器ROM-Read-Only Memory MROM PROM EPRROM 闪速存储器 存储单元指的一行的小单元格 编址地址可以按字，也可以按字节8bit 存储单元个数=大地址-小地址+1 总容量=存储单元个数*编址内容 总容量=单元芯片容量*芯片个数 磁盘结构与参数 存取时间=寻道时间+等待时间(平均定位时间+转动延迟) 磁盘调度算法 FCFS SSTF最短寻道时间优先/最短移臂 流水线技术🌟 不会考的很频繁，流水线，加速比 相关计算：流水线执行时间计算、流水线吞吐率、流水线加速比、流水线效率 流水线 流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可以同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。 -->取指-->分析-->执行 流水线的吞吐率是指单位时间内流水线所完成的任务数量或输出的结果数量。最大吞吐量是极限值。 加速比=不使用流水线执行时间/使用流水线执行时间 总线 一条总线同一时刻仅允许一个设备发送，单允许多个设备接受。 数据总线 地址总线 控制总线 嵌入式系统🌟 比较大的知识板块 芯片 DSP：数字信号处理器，是一种特别适用于进行数字信号处理运算的微处理器。 Soc：片上系统，是一种有专用目标的集成电路。 MPU。微机中的中央处理器。构成微机的核心部件。 MCU：微控制单元，又称单片机/ 嵌入式系统初始化过程 片级初始化：完成嵌入式微处理器的初始化。 板级初始化：完成嵌入式微处理器以外的其他硬件设备的初始化。 系统初始化：以软件初始化为主，主要进行操作系统的初始化。 校验码 循环冗余编码 校验方法 奇偶校验码：奇偶校验，可检查1位的错误，不可纠错 循环冗余校验：在k位信息码之后拼接r位校验码 海明校验码：可检错，也可纠错。记住位数即可。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-12 09:01:50 "},"2021-11/02系统配置与性能评价.html":{"url":"2021-11/02系统配置与性能评价.html","title":"02系统配置与性能评价","keywords":"","body":" 配置系统与性能评价 性能指标 阿姆达尔解决方案🌟🌟🌟 性能评价方法🌟🌟🌟 配置系统与性能评价 [toc] 性能指标 字长与数据通路宽度 主存容量与存取速度 运算速度 吞吐量与吞吐率 响应时间 与完成时间 兼容性 阿姆达尔解决方案🌟🌟🌟 可使用估算法，将整个系统时间设置为10s。 性能评价方法🌟🌟🌟 时钟频率法 指令执行速度法 等效指令速度法 数据处理速率法 综合理论性能法 基准程序法 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-06-25 09:33:13 "},"2021-11/03操作系统基本原理.html":{"url":"2021-11/03操作系统基本原理.html","title":"03操作系统基本原理","keywords":"","body":" 操作系统 进程管理🌟🌟🌟 进程和线程的区别 进程的状态 前趋图🌟 同步与异步 信号量与PV操作🌟 死锁四大条件 银行家算法 存储管理🌟🌟🌟 页式存储组织 段式存储组织 段页式存储组织 快表 文件管理 索引文件🌟 位示图 文件和树型目录结构 空闲存储空间的管理 作业管理 设备管理 数据传输控制方式 虚设备与SPOOLING技术 微内核操作系统 嵌入式操作系统 嵌入式操作系统特点 板级支持包（BSP，也称为硬件抽象层HAL） JTAG接口 操作系统 [toc] 4-7分 1. 进程管理 2. 存储管理 3. 文件管理 4. 作业管理 5. 设备管理 进程管理🌟🌟🌟 PV操作，超级超级超级重要 进程和线程的区别 线程共享：内存地址空间、代码、数据、文件等。 非线程共享：程序计数器、寄存器、栈 进程的状态 三态模型：就绪-运行-阻塞。阻塞态不能直接到运行态。运行态不能直接到就绪态。阻塞态没有CPU状态，也没有非CPU资源。 首先考虑非CPU资源，非CPU资源满足条件才会考虑CPU资源。等待事件是等待非CPU资源释放。 前趋图🌟 = = 同步与异步 CPU访问内存通常是同步方式 CPU与I/O接口交换信息通常是同步方式 CPU与PCI总线交换信息通常是同步方式 I/O接口与打印机交换信息则通常采用基于缓存池的异步方式 信号量与PV操作🌟 互斥：会存在一个共享使用的资源，但是某一时刻只能一个进程使用，临界资源的互斥访问 同步：速度有差异，在一定情况停下等待。 直接制约：由进程顺序制约，同步 间接制约：由资源制约，互斥 临界资源：诸进程中需要护持方式对其进行共享的资源，如打印机、磁带机等 临界区：每个进程中访问临界资源的那段代码称为临界区 信号量：一种特殊的全局变量 P操作：申请并占用资源、锁定资源，S V操作：释放资源 生产者和消费者就是典型的协同现象。 死锁四大条件 互斥 保持和等待 不剥夺 环路等待 银行家算法 当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。 进程可以分期请求资源，但请求的总数不能超过最大需求量 当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源 存储管理🌟🌟🌟 - CPU->Cache->内存->外存 - 用的时候通过局部性原理支撑，将外存内容调到内存，统称虚拟化存储 - 页式存储/段式存储/段页式存储 页式存储组织 优点：利用率高，碎片小，分配及管理简单 缺点：增加了系统开销；可能产生抖动现象 逻辑地址=页号+页内地址 物理地址=页帧号+页内地址（物理块号又称为页帧块） 优先淘汰访问位为0，其次考虑修改位为0 段式存储组织 按用户作业中的自然段来划分逻辑空间，然后调入内存，段段长度可以不一样。 优点：多道程序共享内存，各段程序修改互不影响。 缺点：内存利用率低，内存碎片浪费大。 逻辑地址：（段号，段内偏移量） 段页式存储组织 段式与页式的综合体，先分段，再分页。 优点：空间浪费小、存储共享容易、存储保护容易、能动态连接 缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降 快表 将页表存于Cache上叫快表 将页表存于内存上叫慢表 文件管理 文件管理的是外存里的文件。 索引文件🌟 索引可以理解为指针、地址、盘块号 位示图 空闲区表法 空闲链表法 位示图法 成组链表法 文件和树型目录结构 文件属性：R只读文件属性 / A存档属性 / S系统文件 / H隐藏文件 文件名的组成：驱动器号+路径+主文件名+扩展名 绝对路径：是从盘符开始的路径 相对路径：是从当前目录开始的路径 空闲存储空间的管理 文件管理：空闲区表法、空闲链表法、位示图法 成组链接法 作业管理 软考中从来没有出现过。 设备管理 数据传输控制方式 程序控制方式：严重影响CPU。分为无条件传送和程序查询方式。 程序中断方式：CPU无需等待而提高了传输请求的响应速度。 DMA方式：DMA方式比程序控制方式与中断方式都高效。 通道方式 I/O处理机 虚设备与SPOOLING技术 假脱机技术，没有真正实现脱机打印 微内核操作系统 实质 单体内核 将图形、设备驱动及文件系统等功能全部在内核中实现，运行在内核状态和统一地址空间。 微内核 是实现基本功能，将图形系统、文件系统、设备驱动及通信功能放在内核之外。 嵌入式操作系统 嵌入式操作系统特点 1.微型化 2.代码质量高 3.专业化 4.实时性强 5.可裁剪、可配置 实时嵌入式操作系统的内核服务有：异常和中断、计时器、I/O管理 常见的嵌入式RTOS：VxWorks、RT-Linux、QNX、pSOS 板级支持包（BSP，也称为硬件抽象层HAL） 板级支持包（BSP，也称为硬件抽象层HAL）一般包含相关底层硬件的初始化、数据的输入／输出操作和硬件设备的配置等功能，它主要具有以下两个特点。 ①硬件相关性，因为嵌入式实时系统的硬件环境具有应用相关性，而作为上层软件与硬件平台之间的接口，BSP需为操作系统提供操作和控制具体硬件的方法。 ②操作系统相关性，不同的操作系统具有各自的软件层次结构，因此不同操作系统具有特定的硬件接口形式。 JTAG接口 JTAG（Joint Test Action Group，联合测试工作组）是一种国际标准测试协议（IEEE 1149.1兼容），主要用于芯片内部测试。现在多数的高级器件都支持JTAG协议，如DSP、FPGA器件等。标准的JTAG接口是4线：TMS、TCK、TDI、TDO，分别为模式选择、时钟、数据输入和数据输出线。 一般来说，嵌入式系统通常采用接口中的移位寄存器来实现数据的串／并和并／串转换操作。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 18:14:42 "},"2021-11/04数据库系统.html":{"url":"2021-11/04数据库系统.html","title":"04数据库系统","keywords":"","body":" 数据库系统 数据库模式 三级模式-两层映射 视图 数据库设计过程 ER模型 关键 关系代数 关系代数运算 规范化理论 价值与用途 函数依赖 键 范式 无损分解 反规范化 并发控制 事务的特性 并发产生的问题 封锁协议 数据库完整性约束 约束 数据库安全性 数据备份 分布式数据库 分片透明性 分布式数据库管理系统DDBMS-组成 分布式数据库管理系统-结构 关系数据库与NoSQL数据库对比 NoSQL 数据仓库与数据挖掘 数据库系统 [toc] 1. 数据库设计阶段：数据将设计阶段 2. 关系代数：关系代数运算、关系代数与SQL结合考察 3. 规范化理论：候选关系式、范式、模式分解、其他 4. 并发控制：并发控制 5. 数据库扩展技术：分布式数据库、数据库分区、数据仓库与数据挖掘、联邦数据库、NoSQL、内存数据库、数据库性能优化、大数据 6. 数据备份与恢复：数据备份与恢复 数据库模式 三级模式-两层映射 外模式(视图、用户模式、用户视图)->概念模式(DBA视图)->内模式(内部试图) 外模式-概念模式映射 概念模式-内模式映射 视图 数据库试图是一个虚拟表，其内容由查询定义。但是试图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据 优点：能简化用户操作、使用户能以多角度看待同一数据 缺点：查询之后再展示效率比较低 数据库设计过程 需求分析(数据流图、数据字典、需求说明书) 概念结构设计(ER模型) 逻辑结构设计(关系模式) 物理设计 ER模型 关键 属性 实体 联系 关系代数 关系代数运算 并 交 差 笛卡尔积 投影 选择 自然连接 规范化理论 价值与用途 非规范化的关系模式：数据冗余、更新异常、插入异常、删除异常 函数依赖 部分函数依赖：多个元素的主键才有部分函数依赖 传递依赖 键 候选键 主键：唯一标识元组的属性集合 外键：其他关系的主键 范式 1NF：属性值都是不可分的原子值 2NF：消除非主属性对候选键的部分依赖 3NF：消除非主属性对候选键的传值依赖 BCNF：消除主属性对候选键的部分和传递依赖，左侧决定因素必须包括候选码 无损分解 保持函数依赖分解 无损分解 反规范化 由于规范化会使得表不断的拆分，从而导致数据表过多，会增加查询的工作量。 技术手段：增加派生性冗余列、增加冗余列、重新组表、分割表（水平分割、垂直分割） 并发控制 事务的特性 原子性 一致性 隔离型 持续性 并发产生的问题 丢失更新 不可重复读 脏数据 封锁协议 S锁：读锁、共享锁 X锁：写锁、排他锁、独占锁 一级封锁协议：事务T在修改数据R前必须先对其加X锁，直到事务结束才释放。可防止丢失修改。 二级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，读完后即可释放S锁。可防止丢失修改，还可防止读脏数据。 三级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改，还可防止读脏数据、防止数据重复读。 两段锁协议：可串行化、可能发生死锁。 数据库完整性约束 约束 实体完整性约束：主键唯一且为空 参照完整性约束：外键，其他关键的主键，或者为空 用户自定义完整性约束 针对复杂的约束，系统提供了触发器机制，通过用户编程实现。 数据库安全性 用户标识与坚定 存取控制 密码存储和传输 视图的保护 审计 数据备份 冷备份：数据库在停止状态下，将数据库的文件全部备份下来 热备份：数据库在运行状态下，将数据库的文件全部备份下来 完全备份：备份所有数据 差量备份：仅备份上一次完全备份之后变化的数据 增量备份：备份上一次备份之后变化的数据 影子拷贝：该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本（称为影子副本），并在磁盘上维护一个dp_pointer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。 基于日志的延迟修改技术（deferred-modification technique）的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。 分布式数据库 分片透明性 分片透明性 位置透明性 局部数据模型透明性 分布式数据库管理系统DDBMS-组成 LDBMS（局部数据库管理系统） GDBMS（全局数据库管理系统） 全局数据字典 通信管理Cm 分布式数据库管理系统-结构 全局控制集中的DDBMS 全局控制分散的DDBMS 全局控制部分分散的DDBMS 关系数据库与NoSQL数据库对比 -- 关系数据库模式 -- 并发支持 支持并发、效率低 并发性能高 存储与查询 关系表方式存储、SQL查询 海量数据存储、查询效率高 扩展方式 向上扩展 向外扩展 索引方式 B树、哈希等 键值索引 应用领域 面向通用领域 特定应用领域 NoSQL 类型 eg 键值 redis 列存储数据库 HBase 文档型数据库 MongoDB 图形数据库 Neo4j 数据仓库与数据挖掘 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 18:13:08 "},"2021-11/05计算机网络基础.html":{"url":"2021-11/05计算机网络基础.html","title":"05计算机网络基础","keywords":"","body":" 计算机网络基础 TCP/IP协议族 DHCP与DNS TCP与UDP 网络规划与设计 网络规划原则 网络设计任务 网络实施原则 网络实施步骤 网络规划与设计阶段 逻辑设计与物理设计 分层设计 网络接入 有线接入 无线接入 网络存储技术 存储分类 Raid IPv6 综合布线系统 物联网 云计算 特点 计算机网络基础 [toc] 1. TCP/IP协议簇：TCP与UDP协议、DNS、DHCP 2. 网络规划与设计：网络设计的任务、层次化网络设计 3. 网络存储：网络存储、RAID 4. 综合布线：综合布线 5. IPv6:IPv6地址分类 TCP/IP协议族 DHCP与DNS DHCP：动态主机配置协议 DNS：域名系统。主机向本地域名服务器的查询采用递归查询（正确答案）。本地域名服务器向根域名服务器的查询通过采用迭代查询（线索）。 TCP与UDP TCP：可靠的传输协议 UDP：不可靠的传输协议 网络规划与设计 网络规划原则 实用性原则 开发性原则 先进性原则 网络设计任务 确定网络总体目标 确定总统设计原则 通信子网设计 资源子网设计 设备选型 网络操作系统与服务器资源设备 网络安全设计 网络实施原则 可靠性原则 安全性原则 高效性原则 可扩展性原则 网络实施步骤 工程实施计划 网络设备到货验收 设备安装 系统测试 系统试运行 用户培训 系统转换 网络规划与设计阶段 需求规范 通信规范 逻辑网络设计🌟 物理网络设计🌟 实施阶段 逻辑设计与物理设计 逻辑网络设计阶段：拓扑结构、网络地址分配、安全规划、网络管理、选择路由协议、设备命名规范 物理网络设计阶段：设备的具体物理分布、运行环境等确定、设备选型、结构化布线、机房设计 逻辑网络设计阶段输出：逻辑网络设计图、IP地址方案、安全方案、招聘和培训网络员工的具体说明、对软硬件、服务、员工和培训费用初步估计 物理网络设计阶段输出：网络物理结构图和布线方案、设备和部件的详细列表清单、软硬件和安装费用的估算、安装日程表、详细说明服务的时间以及期限、安装后的测试计划、用户的培训计划 分层设计 接入层：用户接入、计费管理、MAC地址认证、收集用户信息 汇聚层：网络访问策略控制、数据包处理、过滤、寻址 核心层：高速数据交换、常用冗余机制。在设计核心层设备的功能时，应尽量避免使用数据包过滤、策略路由等降低数 据包转发处理的特性，以优化核心层获得低延迟和良好的可管理性。 网络接入 有线接入 公用交换电话网络PSTN 数字数据网DDN 综合业务数字网ISDN 非对称数字用户线路ADSL 同轴光纤技术HFC 无线接入 IEEE 802.11（WIFI） IEEE 802.15（蓝牙） 红外 WAPI网络存储 网络存储技术 存储分类 直连式存储DAS 网络附加存储NAS 存储区域网络SAN IPSAN Raid Raid0：条块化。性能最高，并行处理，无冗余，损坏无法恢复 Raid1：镜像结构。可用性，可修复性好，仅有50%利用率 Raid0+1：高效也可靠 Raid3：奇偶校验并行传送。N+1模式，有固定的校验盘，坏一个盘可恢复 Raid5：分布式奇偶校验的独立磁盘。N+1模式，无固定的校验盘，坏一个盘可恢复 Raid6：两种存储的奇偶校验。N+2模式，无固定的校验盘，坏两个盘可恢复 IPv6 IPv6长度为128位，地址空间增大了2^96倍 综合布线系统 工作区子系统 水平干线系统 管理间子系统 垂直干线子系统 设备间子系统 建筑群子系统 物联网 二维码 云计算 特点 集合了大量计算机、规模达到成千上万 多种软硬件技术相结合 对客户端设备的要求低 规模化效应 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 18:16:29 "},"2021-11/06企业信息化战略与实施.html":{"url":"2021-11/06企业信息化战略与实施.html","title":"06企业信息化战略与实施","keywords":"","body":" 企业信息化战略与实施 信息与信息化的概念 企业信息化 信息化需求 企业信息化方法 信息系统生命周期 信息系统战略规划 政府信息化与电子政务 电子政务分类 企业门户 企业门户分类 企业应用集成 共享数据库 企业集成模式 企业信息化战略与实施 [toc] 信息与信息化的概念 企业信息化 企业信息化涉及到对企业管理理念的创新，按照市场发展的要求，对企业现有的管理流程重新整合，管理核心从对 财务和物料 的管理，转向对 技术、物资和人力资源 的管理，并延伸到对企业技术创新、工艺设计、产品设计、生产制造过程的管理，进而还要扩展到对 客户关系和供应链 的管理乃至发展到电子商务。 信息化需求 一般说来，信息化需求包含3个层次，即战略需求、运作需求和技术需求。 战略需求。组织信息化的目标是提升组织的竞争能力、为组织的可持续发展提供一个支持环境。从某种意义上来说，信息化对组织不仅仅是服务的手段和实现现有战略的辅助工具；信息化可以把组织战略提升到一个新的水平，为组织带来新的发展契机。特别是对于企业，信息化战略是企业竞争的基础。 运作需求。组织信息化的运作需求是组织信息化需求非常重要且关键的一环，它包含三方面的内容：一是实现信息化战略目标的需要；二是运作策略的需要。三是人才培养的需要。 技术需求。由于系统开发时间过长等问题在信息技术层面上对系统的完善、升级、集成和整合提出了需求。也有的组织，原来基本上没有大型的信息系统项目，有的也只是一些单机应用，这样的组织的信息化需求，一般是从头开发新的系统。 企业信息化方法 企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、主题数据库、资源管理和人力资本投资方法。不包括组织机构变革。 信息系统生命周期 立项阶段 开发阶段：总体规划、系统分析、系统设计、系统实施、系统验收 运维阶段 消亡阶段 信息系统战略规划 企业信息化涉及到对企业管理理念的创新，按照市场发展的要求，对企业现有的管理流程重新整合，管理核心从对（ ）的管理，转向对（ ）的管理，并延伸到对企业技术创新、工艺设计、产品设计、生产制造过程的管理，进而还要扩展到对（ ）的管理乃至发展到电子商务。 政府信息化与电子政务 电子政务分类 政府对政府 政务对企业 政府对公民 政府对公务员 企业门户 企业门户分类 企业信息门户EIP 企业信息门户EKP 企业应用门户EAP 垂直门户 企业应用集成 基于JavaEE平台的基础功能服务构建应用系统时，JDBC、JCA和 Java IDL 可用来集成遗产系统。 共享数据库 共享数据库是一种重要的企业应用集成方式，它通常将应用程序的数据存储在一个共享数据库中，通过制定统一的数据库模式来处理不同应用的集成需求。共享数据库为不同的应用程序提供了统一的数据存储与格式定义，能够在一定程度上缓解数据语义不一致的问题，但无法完全解决该问题。在共享数据库集成中，多个应用程序可能通过共享数据库频繁地读取和修改相同的数据，这会使数据库成为一个性能瓶颈。共享数据库集成方式的一个重要限制来自外部的已封装应用，这些封装好的应用程序只能采用自己定义的数据库模式，调整和集成余地较小。 企业集成模式 面向信息的集成 面向过程的集成：强调处理不同应用系统之间的交互逻辑，与核心业务逻辑相分离，并通过不同应用系统之间的协作共同完成某项业务功能。 面向服务的集成 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 18:29:19 "},"2021-11/07软件工程.html":{"url":"2021-11/07软件工程.html","title":"07软件工程","keywords":"","body":" 软件工程 软件开发方法 软件开发模型 敏捷方法4大价值观 敏捷开发方法 逆向工程 需求工程 需求开发 需求管理 需求分析 需求变更管理 系统设计 软件设计 结构化设计 面向对象设计-设计原则 设计模式-创建型模式 设计模式-结构型模式 设计模式-行为型模式 软件测试 软件测试方法 测试阶段 软件调试 系统测试 软件运行与软件维护 系统转换计划 软件维护 软件工程 [toc] 软件开发方法 原型法 结构化法 面向对象方法 面向服务的方法 形式化方法 统一过程方法 敏捷方法 基于架构的开发方法ABSD 软件开发模型 瀑布模型：迭代模型/迭代开发方法 演化模型：快速应用开发 增量模型：构件组装模型/基于构建的开发方法 螺旋模型：统一过程/统一开发方法 原型模型：敏捷开发方法 喷泉模型：模型驱动的开发方法 V模型：基于架构的开发方法 敏捷方法4大价值观 沟通、简单、反馈、勇气 敏捷开发方法 极限编程XP： 水晶方法： 开放式编码： SCRUM：明确定义了的可重复的方法过程。 功用驱动开发方法FDD：编程开发人员分为两类：首席程序员和“类”程序员 ASD方法： 逆向工程 实现级：抽象语法数、符号表、过程 结构级：程序分量之间相互依赖关系 功能级：程序段功能及程序段 领域级：应用领域概念之间对应关系 需求工程 需求开发 需求获取 需求分析 需求定义 需求验证 需求管理 变更控制 版本控制 需求跟踪 需求状态跟踪 需求分析 状态转换图STD 数据流图DFD 数据模型ER图 数据字典 UML 需求变更管理 问题分析和变更描述 变更分析和成本计算 变更实现 系统设计 软件设计 结构设计 数据设计 接口设计 过程设计 结构化设计 需求设计：数据流图 概要设计：模块结构图、层次图和HIPO图 详细设计：程序流程图、伪代码、盒图 面向对象设计-设计原则 单一职责原则：设计目的单一的类。 开放-封闭原则：对扩展开放，对修改封闭。 李氏（Liskov）替换原则：子类可以替换父类。 依赖倒置原则：要依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程。 接口隔离原则：使用多个专门的接口比使用单一的总接口要好。 组合重用原则：要尽量使用组合，而不是继承关系达到重用目的。 迪米特（Demeter）原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解。 面向对象的设计模型包含以包图表示的软件体系结构图，以交互图表示的用例实现图，完整精确的类图，针对复杂对象的状态图和用以描述流程化处理的活动图等。 设计模式-创建型模式 Factory Method工厂方法模式： Abstract Factory抽象工厂模式： Builder构建器模式： Prototype原型模式： Singleton单例模式： 设计模式-结构型模式 Adapter适配器模式 Bridge桥接模式 Composite组合模式 Decorator装饰模式 Fecade外观模式 Flyweight享元模式：对庞大对象的管控。eg：汉字编码、棋牌。 Proxy代理模式：快捷方式 设计模式-行为型模式 Chain of Responsibility职责链模式：eg：请假审批 Command命令模式：eg：日志记录，可撤销 Interpreter解释器模式：eg：虚拟机 Iterator迭代器模式：数据集 Mediator中介者模式：不直接引用 Menmento备忘录模式：游戏存档 Observer观察者模式：订阅、广播、联动 State状态模式：状态变成类 Strategy策略模式：多方案切换 Template Method模版方法模式：框架 Visitor访问者模式：数据与操作分离。在不改变原来类结构(活动节点)的基础上增加新功能。 软件测试 软件测试方法 动态测试：计算机运行。黑盒测试、白盒测试、灰盒测试 静态测试：纯人工。桌前检查、代码审查、代码走查 测试阶段 单元测试 集成测试：主要测试各模块之间的接口是否正常起作用。 系统测试 确认测试 回归测试 软件调试 蛮力法 回溯法 原因排除法 系统测试 系统测试是根据系统方案说明书来设计测试用例，常见的系统测试主要有恢复测试、安全性测试、压力测试、性能测试、可靠性测试、可用性测试、可维护性测试和安装测试。 软件运行与软件维护 系统转换计划 高水平高价值：改造 高水平低价值：集成 低水平高价值：继承 低水平低价值：淘汰 软件维护 正确性维护 适应性维护 完善性维护 预防性维护 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 19:12:04 "},"2021-11/08项目管理.html":{"url":"2021-11/08项目管理.html","title":"08项目管理","keywords":"","body":" 项目管理 立项管理 盈亏平衡分析 范围管理 时间管理 前导图法（单代号网络图，PDM） 关键路径法 成本管理 成本估算方法 成本预算方法 软件质量管理 质量保证&质量控制 软件过程改进 CMMI 软件配置管理 变更控制过程 软件工具 配置项 项目管理 [toc] 立项管理 盈亏平衡分析 销售额=固定成本+可变成本+税费+利润【正常情况】 销售额=固定成本+可变成本+税费【盈亏平衡】 可变成本/销售额不变，税费/销售额不变 范围管理 确定项目的边界，即哪些工作是项目应该做的，哪些工作不应该包括在项目中 范围计划编制 范围定义：项目章程/项目范围管理计划/批准的变更申请/组织过程资产 创建WBS：便于估算，明确范围，防止需求蔓延。WBS字典 范围确认 范围控制 时间管理 时间管理也叫进度管理。 活动定义 活动排序 活动资源估算 活动历时估算 指定进度计划 进度控制 前导图法（单代号网络图，PDM） 关键路径的长度=最短工期=最长路径 总时差为0的活动为关键活动 关键活动组成的路径为关键路径 一个项目可以有多条关键路径，但是对项目不好 关键路径法 总时差（松弛时间）：在不延误 自由时差 成本管理 成本估算方法 自顶向下的估算 自底向上的估算 差别估算法 成本预算方法 直接成本与间接成本 管理储备 零基准预算 软件质量管理 质量保证&质量控制 质量保证：每隔一段时间进行。工具：质量审计和过程分析 质量控制：实时监控项目的具体结果 软件过程改进 CMMI 已管理级 已定义级 定量管理级 优化级 软件配置管理 变更控制过程 变更申请 变更评估 变更决策 变更实施 变更验证 沟通存档 软件工具 软件开发工具：需求分析工具、设计工具、编码与排错工具 软件维护工具：版本控制工具、文档分析工具、开发信息库工具、逆向工程工具、再工程工具 软件管理和软件支持工具：项目管理工具、配置管理工具、软件评价工具、软件开发工具的评价和选择 配置项 属于产品组成部分的工作成果：如需求文档、设计文档、源代码和测试用例等； 属于项目管理和机构支撑过程域产生的文档：如工作计划、项目质量报告和项目跟踪报告等。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-10 17:40:46 "},"2021-11/09软件架构设计.html":{"url":"2021-11/09软件架构设计.html","title":"09软件架构设计","keywords":"","body":" 软件架构设计 软件架构的概念 架构的本质 架构的“4+1”视图 软件架构风格 五大架构风格 其他风格 层次架构风格 基于服务的架构SOA 架构描述语言ADL ADL的三个基本元素： 特定领域软件架构DSSA 基本活动 角色 基于架构的软件开发ABSD 概念 开发过程 软件质量属性 & 软件架构评估 质量属性 评估点 基于场景的评估方法 软件产品线 建立产品线的方式 构件与中间件技术 构建的特性 基于中间件技术的优点 构件的复用 构件标准 软件架构文档 软件架构设计 [toc] 软件架构的概念 架构的本质 软件架构为软件系统提供了一个结构、行为和属性的高级抽象。 架构架构风格是特定应用领域的惯用模式，架构定义一个词汇表和一组约束 架构的“4+1”视图 逻辑视图 开发视图 进程视图 物理视图 软件架构风格 五大架构风格 数据流风格： 批处理：大量整体数据、无需用户交互 管道过滤器：流式数据、弱用户交互 调用/返回风格： 主程序/子程序 面向对象 层次结构 独立构件风格： 进程通信 事件驱动系统（隐式调用）：windows图形界面、断点回调 虚拟机风格： 解释器：适用于需要“自定义规则”的场合 规则系统：适用于专家系统 仓库风格： 数据库系统、 黑板系统：语音识别、知识推理、模式识别、知识推理 超文本系统 其他风格 闭环控制架构（过程控制）：适合于嵌入式系统，适用于处理简单任务。经验应用：空调控温、定速巡航 C2风格：构件和连接件都有一个顶部和一个底部 层次架构风格 两层C/S --> 三层C/S --> 三层B/S --> 混合架构 MVC架构风格 MVP架构风格：MVC的变种 MVVM RIA架构风格 基于服务的架构SOA 服务 > 构件 > 对象 Web Service ESB：提供位置透明性的消息路由和寻址服务 架构描述语言ADL ADL的三个基本元素： 构件：计算或数据存储单元 连接件：用于构件之间交互建模的体系结构构造块及其支配这些交互的规则 架构配置：描述体系结构的构建与连接件的连接图 特定领域软件架构DSSA 基本活动 领域分析：建立领域模型 领域设计：获得DSSA 领域实现：开发和组织可复用信息 角色 领域专家：专家只提供意见，不干活 领域分析人员：有经验的系统分析员 领域设计人员：有经验的软件设计人员 领域实现人员：有经验的程序设计人员 基于架构的软件开发ABSD 概念 ABSD方法是架构驱动，即强调由业务、质量和功能需求的组合驱动架构设计 ABSD有三个基础。1.功能的分解。2.通过选择架构风格来实现质量和业务需求。3.软件模板的使用。 采用视角与视图来描述软件架构，采用用例来描述功能需求，采用质量场景来描述质量需求。 ABSD 方法是一个自顶向下，递归细化的过程，软件系统的架构通过该方法得到细化，直到能产生软件构件的类。 开发过程 架构需求 架构设计 架构文档化：输出结果为架构规则说明和测试架构需求的质量设计说明书这两个文档。 架构复审：目的是标识潜在的风险。 架构实现 架构演化 软件质量属性 & 软件架构评估 质量属性 性能：系统的响应能力。增加可用资源/ 可靠性： 可用性：系统能正常运行的时间比例。ping/echo/心跳/主动冗余 安全性：审计追踪/身份验证 可修改性：信息隐藏 功能性 可变性 互操作性 评估点 敏感点：一个或多个构件的特性 权衡点：多个质量属性的敏感点 风险点 非风险点 基于场景的评估方法 软件架构分析法SAAM 架构权衡分析法ATAM：1.场景和需求收集。2.架构视图和场景实现。3.属性模型构造和分析。4.折中。 成本效益分析法CBAM 软件产品线 建立产品线的方式 演化方式 革命方式 构件与中间件技术 构建的特性 独立部署单元 作为第三方的组装单元 没有（外部的）可见状态 基于中间件技术的优点 面向需求 业务的分隔和包容性 设计与实现隔离 隔离复杂的系统资源 符合标准的交互模型 软件复用 提供对应用构件的管理 构件的复用 检索与提取构件 理解与评论构件 修改构件 组装构件 构件标准 COBRA COM EJB 基于构件的开发模型由软件的需求分析定义、体系结构设计、构件库建 立、应用软件构建以及测试和发布 5 个阶段组成。 软件架构文档 软件架构文档的写作应该遵循一定的原则，这些原则包括： 文档要从使用者的角度进行编写；必须分发给所有与系统有关的开发人员： 应该保持架构文档的即时更新，但更新不要过于频繁： 架构文档中描述应该尽量避免不必要的重复； 每次架构文档修改都应该记录进行修改的原则。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-10 19:14:35 "},"2021-11/10系统安全分析与设计.html":{"url":"2021-11/10系统安全分析与设计.html","title":"10系统安全分析与设计","keywords":"","body":" 系统安全分析与设计 安全基础技术 对称与非对称加密 常见对称密钥加密算法 信息摘要 数字签名 数字证书内容 PKI公钥体系 网络安全 安全协议 网络攻击 等级保护标准 安全防范体系的层次划分 系统安全分析与设计 [toc] 安全基础技术 对称与非对称加密 对称加密：加密强度不高，但效率高 密钥分发困难 常见对称密钥加密算法 DES：替换+移位。三重DES。 RC-5 IDEA AES 常见非对称密钥加密算法 RSA Elgamal ECC 信息摘要 保证信息的完整性 单向散列函数、固定长度的散列值 常见的信息摘要算法有MD5、SHA等，市场上广泛使用的MD5，SHA算法的散列值分别为128和160位，由于SHA通用采用的密钥长度较长，因此安全性高于MD5 数字签名 可以识别发送者身份，防抵赖 数字证书内容 证书的版本信息 证书的序列号 证书所使用的签名算法 证书的发行机构名称 证书的有效期 证书所有人的名称 证书所有人的公开密钥 证书发行者对证书的签名CA PKI公钥体系 CA认证中心 RA注册审批机构 证书受理点 密钥管理中心-KMC 网络安全 安全协议 PGP：优良保密协议。针对邮件和文件的加密系统 SSL：安全套接字协议。工作在传输层至应用层 TLS：传输层安全协议。 SET：安全电子交易协议。电子商务，身份认证 IPSEC：互联网安全协议。对IP包加密 网络攻击 被动攻击：收集信息为主。窃听/业务流分析/非法登陆 主动攻击：假冒身份/抵赖/旁路攻击/重放攻击/拒绝服务 等级保护标准 用户自主保护级 系统审计保护级 安全标记保护级 结构化保护级 访问验证保护级 安全防范体系的层次划分 物理环境的安全性：机房安全 操作系统的安全性：漏洞补丁管理 网络的安全性：入侵检测 应用的安全性：数据库安全 管理的安全性 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 10:26:16 "},"2021-11/11系统可靠性分析与设计.html":{"url":"2021-11/11系统可靠性分析与设计.html","title":"11系统可靠性分析与设计","keywords":"","body":" 系统可靠性分析与设计 可靠性相关概念 系统可靠性分析 软件可靠性设计 影响软件可靠性的主要因素 可靠性设计技术 系统可靠性分析与设计 [toc] 可靠性相关概念 系统可靠性是系统在规定时间内和规定的环境条件下，完成规定功能的能力，也就是系统无故障运行的概率 系统可用性是指在某个时间点上系统能够按照需求执行的概率 系统可靠性分析 平均无故障时间 平均故障修复时间 平均故障间隔时间 系统可用性 软件可靠性设计 影响软件可靠性的主要因素 软件的开发方法和开发环境 运行环境 软件规模 软件内部结构 软件的可靠性投入 可靠性设计技术 避错技术 降低复杂度设计s 检错技术 容错技术：N版本程序设计/恢复块设计/防卫式程序设计 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 10:58:42 "},"2021-11/12法律法规与标准化知识.html":{"url":"2021-11/12法律法规与标准化知识.html","title":"12法律法规与标准化知识","keywords":"","body":" 法律法规与标准化知识 保护范围与对象 保护期限 知识产权人确定 侵权判断🌟 标准的分类 标准代号的识别 法律法规与标准化知识 [toc] 保护范围与对象 -- -- -- 著作权法 著作权/文学、绘画、摄影等作品 不需要申请，作品完成即开始保护 软件著作权法 软件著作权/软件作品 不需要申请，作品完成即开始保护 专利法 专利权 需要申请，专利权有效期是从申请日开始保护 商标法 商标权 需要申请，核准之日起商标受保护 反不正当竞争法 商业秘密权 商业秘密包括技术与经营两个方面。必须有保密措施才能认定商业秘密 保护期限 知识产权人确定 侵权判断🌟 标准的分类 国际标准：ISO、IEC 国家标准：GB-中国、ANSI-美国、BS-英国、JIS-日本 区域标准：PASC-太平洋地区标准回忆 行业标准：GJF-中国军用标准 地方标准：国家的地方一级行政机构制定的标准 企业标准 项目规范 标准代号的识别 国际、国外标准代号：标准代号+专业类号+顺序号+年代号 我国国家标准代号：强制性标准代号-GB、推荐性标准代号-GB/T、指导性标准代号-GB。Z、实物标准代号GSB 行业标准代号：汉语拼音大写字母组成 地方标准代号：由DB加上省级行政区代码的前两位 企业标准代号：由Q加上企业代号组成 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 16:50:20 "},"2021-11/13数学与经济管理.html":{"url":"2021-11/13数学与经济管理.html","title":"13数学与经济管理","keywords":"","body":" 数学与经济管理 图论应用 最小生成树 最短路径 网络与最大流量 运筹方法 关键路径法 线性规划 动态规划 预测与决策 数学建模 数学与经济管理 [toc] 图论应用 做这类题，有一个基本的原则：把多个任务中，第1步耗时最短的安排在最开始执行，再把最后1步耗时最短的安排在最后完成。 最小生成树 克鲁斯卡尔算法：最短边 普里斯算法：顶点 最短路径 网络与最大流量 运筹方法 关键路径法 线性规划 动态规划 预测与决策 数学建模 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-08-15 21:09:04 "},"01计算机基础.html":{"url":"01计算机基础.html","title":"01计算机基础","keywords":"","body":" 计算机基础 区分服务[16] IPv6[16] Web服务器性能评估[16] 路由来源&管理距离[16] 分布式数据库[15] 性能评价[15] 网络分层设计模型[14、11] 结构化布线系统[14] 网络需求分析[13] 数据库设计[12] 网络控制[12] 域名服务器[12] 网络存储[12] 操作系统接口[11] CISC和RISC[11] 计算机系统总线结构[11] 安全电子邮件[11] 数据集成[11] 操作系统 计算机基础 [toc] 区分服务[16] 区分服务要求每个IP分组都要根据IPv4协议头中的服务类型(在IPv6中是通信类型)字段加上一个DS码点，然后内部路由器根据DS码点的值对分组进行调度和转发。 IPv6[16] 在IPv6无状态自动配置过程中，主机将其MAC地址附加在地址前缀1111111010之后，产生一个链路本地地址。 IPv6寻址模式分为三种，即单播地址、组播地址和泛播地址。 IPv6数据包的首部比IPv4的简单。 IPv6地址长度为128比特。 与IPv4相比，IPv6首部有下列改进： ​ ●分组头格式得到简化：IPv4头中的很多字段被丢弃，IPv6头中字段的数量从12个降到了8个，中间路由器必须处理的字段从6个降到了4个，这样就简化了路由器的处理过程，提高了路由选择的效率。 ​ ●改进了对分组头部选项的支持：与IPv4不同，路由选项不再集成在分组头中，而是把扩展头作为任选项处理，仅在需要时才插入到IPv6头与负载之间。这种方式使得分组头的处理更灵活，也更流畅。以后如果需要，还可以很方便地定义新的扩展功能。 ​ ●提供了流标记能力：IPv6增加了流标记，可以按照发送端的要求对某些分组进行特别的处理，从而提供了特别的服务质量支持，简化了对多媒体信息的处理，可以更好地传送具有实时需求的应用数据。 Web服务器性能评估[16] Web服务器性能指标主要有请求响应时间、事务响应时间、并发用户数、吞吐量、资源利用率、每秒钟系统能够处理的交易或者事务的数量等。 路由来源&管理距离[16] 若管理距离小于外部BGP的管理距离20，则该路由信息比较可靠。 分布式数据库[15] 在分布式数据库中包括分片透明、复制透明、位置透明和逻辑透明等基本概念。 分片透明是指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的。 复制透明是指采用复制技术的分布方法，用户不需要知道数据是复制到哪些节点，如何复制的。 位置透明是指用户无须知道数据存放的物理位置。 逻辑透明，即局部数据模型透明，是指用户或应用程序无须知道局部场地使用的是哪种数据模型。 性能评价[15] 相对于小型基准程序、真实程序和核心程序，用合成基准程序评测的准确程度最低。 真实程序>核心程序>小型基准程序>合成基准程序 TPC-D是决策支持的基准程序。 网络分层设计模型[14、11] 按照网络分层设计模型，通常把局域网设计为3层，即核心层、汇聚层和接入层。 ​ ①核心层是因特网络的高速骨干网，由于其重要性，因此在设计中应该采用冗余组件设计。在设计核心层设备的功能时，应尽量避免使用数据包过滤和策略路由等降低数据包转发速率的功能。如果需要连接因特网和外部网络，核心层还应包括一条或多条连接到外部网络的连接。核心层特性：高速连接、冗余设计、较少的设备连接。 ​ ②汇聚层是核心层和接入层之间的分界点，应尽量将资源访问控制、流量的控制等在汇聚层实现。为保证层次化的特性，汇聚层应该向核心层隐藏接入层的细节，例如不管接入层划分了多少个子网，汇聚层向核心层路由器进行路由宣告时，仅宣告由多个子网地址汇聚而成的网络。为保证核心层能够连接运行不同协议的区域网络，各种协议的转换都应在汇聚层完成。汇聚层定义了网络的访问策略。 ​ ③接入层为用户提供在本地网段访问应用系统的能力，也要为相邻用户之问的互访需求提供足够的带宽。接入层还应该负责一些用户管理功能，以及户信息的收集工作。接入层提供局域网络接入功能。接入层可以使用集线器代替交换机。 结构化布线系统[14] 结构化布线系统分为6个子系统：工作区子系统、水平子系统、管理子系统、干线(或垂直)子系统、设备间子系统和建筑群子系统。 水平子系统：是指各个楼层接线间的配线架到工作区信息插座之间所安装的线缆系统，其作用是将干线子系统与用户工作区连接起来。 垂直子系统：由主设备间(如计算机房、程控交换机房等)提供建筑中最重要的铜线或光纤线主干线路构成，是整个建筑的信息交通枢纽。一般它提供位于不同楼层的设备间和布线框间的多条连接路径，也可以连接单层楼的大片地区。 网络需求分析[13] 网络需求分析包括网络总体需求分析、综合布线需求分析、网络可用性与可靠性分析、网络安全性需求分析，此外还需要进行工程造价估算。 数据库设计[12] 数据库设计主要分为用户需求分析、概念结构、逻辑结构和物理结构设计四个阶段。 其中，在用户需求分析阶段中，数据库设计人员采用一定的辅助工具对应用对象的功能、性能、 限制等要求所进行的科学分析，并形成需求说明文档、数据字典和数据流程图。用户需求分析阶段形成的相关文档用以作为概念结构设计的设计依据。逻辑设计阶段的任务是将概念模型设计阶段得到的基本E-R图转换为与选用的DBMS产品所支持的数据模型相符合的逻辑结构。在此阶段进行关系规范化。 网络控制[12] TCP采用可变大小的滑动窗口协议进行流量控制。在前向纠错系统中，当接收端检测到错误后就根据纠错编码的规律自行纠错； 在后向纠错系统中，接收方会请求发送方重发出错分组。IP协议不预先建立虚电路，而是对每个数据报独立地选择路由并一站一站地进行转发，直到送达目标地。 域名服务器[12] ​ 可提供域名服务的包括本地缓存、本地域名服务器、权限域名服务器、顶级域名服务器以及根域名服务器。DNS主机名解析的查找顺序是，先查找客户端本地缓存，如果没有成功，则向DNS服务器发出解析请求。 ​ 本地缓存是内存中的一块区域，保存着最近被解析的主机名及其IP地址映像。由于解析程序缓存常驻内存中，所以比其他解析方法速度快。 ​ 当一个主机发出DNS查询报文时，这个查询报文就首先被送往该主机的本地域名服务器。本地域名服务器离用户较近，当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。 ​ 每一个区都设置有域名服务器，即权限服务器，它负责将其管辖区内的主机域名转换为该主机的IP地址。在其上保存有所管辖区内的所有主机域名到IP地址的映射。 ​ 顶级域名服务器负责管理在本顶级域名服务器上注册的所有二级域名。当收到DNS查询请求时，能够将其管辖的二级域名转换为该二级域名的IP地址。或者是下一步应该找寻的域名服务器的IP地址。 ​ 根域名服务器是最高层次的域名服务器。每一个根域名服务器都要存有所有顶级域名服务器的IP地址和域名。当一个本地域名服务器对一个域名无法解析时。就会直接找到根域名服务器，然后根域名服务器会告知它应该去找哪一个顶级域名服务器进行查询。 网络存储[12] ​ DAS(Direct Attachedstorage，直接附加存储)即直连方式存储。在这种方式中，存储设备是通过电缆(通常是SCSI接口电缆)直接连接服务器。I／O(输入／输入)请求直接发送到存储设备。DAS也可称为SAS(Server-Attached Storage，服务器附加存储)。它依赖于服务器，其本身是硬件的堆叠，不带有任何存储操作系统，DAS不能提供跨平台文件共享功能，各系统平台下文件需分别存储。 ​ NAS是(Network Attached Storage)的简称，中文称为网络附加存储。在NAS存储结构中，存储系统不再通过I／O总线附属于某个特定的服务器或客户机，而是直接通过网络接口与网络直接相连，由用户通过网络来访问。 ​ NAS设备有自己的OS，其实际上是一个带有瘦服务的存储设备，其作用类似于一个专用的文件服务器，不过把显示器，键盘，鼠标等设备省去，NAS用于存储服务，可以大大降低了存储设备的成本，另外NAS中的存储信息都是采用RAID方式进行管理的，从而有效的保护了数据。 ​ SAN是通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统，未来的信息存储将以SAN存储方式为主。SAN主要采取数据块的方式进行数据和信息的存储，目前主要使用于以太网(IP SAN)和光纤通道(FC SAN)两类环境中。 操作系统接口[11] 操作系统为用户提供了两类接口：操作一级和程序控制一级的接口 操作一级接口：操作控制命令、菜单命令、窗口 程序控制一级接口：系统调用 CISC和RISC[11] CISC：复杂指令集计算机。基本思想是进一步增强原有指令的功能，用更为复杂的新指令取代原先由软件子程序完成的功能，实现软件功能的硬件化，导致机器的指令系统越来越庞大而复杂。CISC计算机一般所含的指令数目至少300条以上，有的甚至超过500条。采用CISC技术的CPU，其芯片设计复杂度更高。 RISC：精简指令集计算机。基本思想是通过减少指令总数和简化指令功能，降低硬件设计的复杂度，使指令能单周期执行，并通过优化编译，提高指令的执行速度，采用硬线控制逻辑，优化编译程序。在RISC中，更适合采用硬布线逻辑执行指令。指令系统中的指令种类和寻址方式更少。 计算机系统总线结构[11] 挂接在总线上的多个部件，只能分时向总线发送数据，但可同时从总线接收数据。 [11]负载均衡： 负载均衡一般由服务端安装的附加软件来实现，通过采用负载均衡技术，系统的吞吐量会得到增加。 负载均衡可以在不同地理位置、不同网络结构的服务器集群之间进行，采用负载均衡技术，用户可以仅通过IP地址或域名访问相应的服务器。 安全电子邮件[11] PGP (Pretty Good Privacy)是Philip R．Zimmermann在1991年开发的电子邮件加密软件包。PGP已经成为使用最广泛的电子邮件加密软件。 数据集成[11] 关键要判断在进行集成时，需要数据库中的单表还是多表进行数据整合。如果是单表即可完成整合，则可以将该表包装为记录，采用主动记录的方式进行集成； 如果需要多张表进行数据整合，则需要采用数据映射的方式完成数据集成与处理。 操作系统 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-22 09:28:30 "},"02信息系统基础知识.html":{"url":"02信息系统基础知识.html","title":"02信息系统基础知识","keywords":"","body":" 信息系统基础知识 信息系统的生命周期 电子政务 & 电子商务 电子政务基础知识[13、16] 电子商务基础知识 电子商务主要模式[15] 电子商务的参与实体 企业资源计划ERP[12] 客户关系管理CRM[12] 供应链管理SCM 信息化的三流 供应链设计原则 商业智能系统BI[15] 商业智能的四个阶段 数据仓库的特点 数据湖 决策支持系统DSS 业务流程 业务流程重组BPR 业务流程管理BPM 企业门户[10] 企业应用集成EAI[14、13、12] IETF集成服务(IntServ)[14] 企业信息化[14、12] 电子商务 信息系统基础知识 [toc] 信息系统的生命周期 系统规划：初步调查 系统分析 系统设计 系统实施 系统验收 电子政务 & 电子商务 电子政务基础知识[13、16] 电子政务是对现有的政府形态的一种改造，利用信息技术和其他相关技术，将其管理和服务职能进行集成，在网络上实现政府组织结构和工作流程优化重组。与电子政务相关的行为主体有三个，即：政府、企(事)业单位和居民。 电子商务基础知识 ERP(Enterprise Resource Planning)是建立在信息技术的基础上，利用现代企业的先进管理思想，对企业的物流、资金流和信息流进行全面集成管理的管理信息系统，为企业提供决策、计划、控制与经营业绩评估的全方位和系统化的管理平台。在ERP系统中，库存管理模块主要是对企业物料的进、出、存进行管理。 电子商务主要模式[15] 政府对政府 G2G (Government To Government) 政府对公务员 G2E (Govemment To Employee) 政府对企业 G2B (Government To Business) 政府对公民 G2C (Government To Citizen) 电子商务分五个方面，即电子商情广告、电子选购与交易、电子交易凭证的交换、电子支付与结算，以及网上售后服务等。 电子商务的参与实体 参与电子商务的实体有4类：客户(个人消费者或集团购买)、商户(包括销售商、制造商和储运商)、银行(包括发行和收单行)及认证中心。 企业资源计划ERP[12] ERP中的企业资源包括 物流、资金流、信息流 。ERP实际上就是对这“三流”资源进行全面集成管理的管理信息系统。 客户关系管理CRM[12] CRM是一套先进的管理思想及技术手段，它通过将 人力资源、业务流程与专业技术 进行有效的整合，最终为企业涉及到的各个领域提供了集成环境。CRM系统的四个主要模块包括 销售自动化、营销自动化、客户服务与支持、商业智能 。 通过维护客户关系，让企业获得利益。 供应链管理SCM 供应链中的信息流覆盖了从 供应商、制造商到分销商，再到零售商 等供应链中的所有环节，其信息流分为需求信息流和供应信息流，这是两个不同流向的信息流。当需求信息(如客户订单、生产计划和采购合同等)从需方向供方流动时，便引发物流。同时，供应信息(如入库单、完工报告单、库存记录、可供销售量和提货发运单等)又同物料一起沿着供应链从供方向需方流动。 信息化的三流 信息流：需求信息流和供应信息流。信息流是核心。 资金流 物流 供应链设计原则 供应链设计原则：1. 自顶向下和自底向上结合 2. 简洁性原则 3. 互补性原则 4. 协调性原则 5. 不确定性原则 6. 创新性原则 7. 战略性原则 商业智能系统BI[15] 商业智能是企业对商业数据的搜集、管理和分析的系统过程，主要技术包括数据仓库、联机分析处理、数据挖掘、数据备份和恢复。 商业智能的四个阶段 商业智能系统主要包括数据预处理、建立数据仓库、数据分析及数据展现 4 个主要阶段。 数据预处理：数据预处理是整合企业原始数据的第一步，包括数据的抽取、转换和装载三个过程。（抽取、清理、装载、刷新） 建立数据仓库：建立数据仓库则是处理海量数据的基础。（数据集市是小一号的仓库，只包含某些主题，不包括全部主题） 数据分析：数据分析是体现系统智能的关键，一般采用 联机分析处理OLAP 和 数据挖掘技术 。联机分析处理不仅进行数据汇总／聚集，同时还提供切片、切块、下钻、上卷和旋转等数据分析功能，用户可以方便地对海量数据进行多维分析。数据挖掘的目标则是挖掘数据背后隐藏的知识，通过关联分析、聚类和分类等方法建立分析模型，预测企业未来发展趋势和将要面临的问题。 数据展现：在海量数据和分析手段增多的情况下，数据展现则主要保障系统分析结果的可视化。 数据仓库的特点 面向主题：数据按主题组织。 集成的：消除了源数据中的不一致性，提供整个企业的一致性全局信息。 相对稳定的：主要进行查询操作，只有少量的修改和删除操作。 反映历史变化：记录了企业从过去某一时刻到当前各个阶段的信息。 数据湖 数据湖是一个存储企业的各种各样原始数据的大型仓库，其中的数据可供存取、处理、分析及传输。 数据湖从企业的多个数据源获取原始数据，并且针对不同的目的，同一份原始数据还可能有多种满足特定内部模型格式的数据副本。因此，数据湖中被处理的数据可能是任意类型的信息，从 结构化数据 到 完全非结构化数据 。 数据仓库仅支持分析处理。数据湖既支持分析处理，也支持事务处理。 决策支持系统DSS 业务流程 业务流程重组BPR BPR是对企业的业务流程进行根本性的再思考和彻底的再设计，从而获得可以用诸如成本、质量、服务和速度等方面的业绩来衡量的显著性的成就。 业务流程管理BPM BPM是一种以规范化的构造端对端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统化方法。 企业门户[10] 企业门户是一个信息技术平台，这个平台可以提供个性化的信息服务，为企业提供一个单一的访问企业各种信息资源和应用程序的入口。现有的企业门户大致可以分为 企业信息门户 、 企业知识门户 和 企业应用门户 三种。 企业信息门户EIP：重点强调为访问结构数据和无结构数据提供统一入口，实现收集、访问、管理和无缝集成。 企业知识门户EKP：提供了一个创造、搜集和传播企业知识的平台，通过企业知识门户，员工可以与工作团队中的其他成员取得联系，寻找能够提供帮助的专家。 企业应用门户EAP：提高企业的集中贸易能力、协同能力和信息管理能力的平台。 企业应用集成EAI[14、13、12] 企业集成平台是一个支持复杂信息环境下信息系统开发、集成、协同运行的软件支撑环境，包括硬件、软件、软件工具和系统。基本功能包括： 通信服务：提供分布环境下透明的同步／异步通信服务功能； 信息集成服务：为应用提供透明的信息访问服务，实现异种数据库系统之间数据的交换、互操作、分布数据管理和共享信息模型定义； 应用集成服务：通过高层应用编程接口来实现对相应应用程序的访问，能够为应用提供数据交换和访问操作，使各种不同的系统能够相互协作； 二次开发工具：是集成平台提供的一组帮助用户开发特定应用程序的支持工具； 平台运行管理工具：是企业集成平台的运行管理和控制模块。 企业应用集成可以分为 表示集成 、 数据集成 、 控制集成 和 业务流程集成 。 表示集成（界面集成） 数据集成：JDBC中间件。把不同来源、格式、特点性质的数据在逻辑上或物理上有机地集中。 控制集成（应用集成、API集成）。可以借助远程过程调用或远程方法调用、面向消息的中间件等技术。 业务流程集成（过程集成，B2B） 企业信息资源集成管理的前提是对企业信息功能的集成，其核心是对企业内部和外部信息流的集成。 集成管理是企业信息资源管理的主要内容之一。实行企业信息资源集成的前提是对企业历史上形成的企业信息功能的集成，其核心是对企业内部和外部信息流的集成，其实施的基础是各种信息手段的集成。通过集成管理实现企业信息系统各要素的优化组合，使信息系统各要素之间形成强大的协同作用，从而最大限度地放大企业信息的功能，实现企业可持续发展的目的。 信息集成服务： 应用系统集成是实现不同系统之间的互操作，使得不同应用系统之间能够实现数据和方法的共享； 业务过程集成使得在不同应用系统中的流程能够无缝连接，实现流程的协调运作和流程信息的充分共享。 IETF集成服务(IntServ)[14] IETF集成服务(IntServ)工作组根据服务质量的不同，把Internet服务分成了三种类型： 保证质量的服务(Guranteed Services)：对带宽、时延、抖动和丢包率提供定量的保证； 负载受控的服务(Controlled-load Services)：提供一种类似于网络欠载情况下的服务，这是一种定性的指标； 尽力而为的服务(Best-Effort)：这是Internet提供的一般服务，基本上无任何质量保证。 企业信息化[14、12] 企业信息化一定要建立在企业战略规划的基础之上，以企业战略规划为基础建立的企业管理模式是建立企业战略数据模型的依据。 企业信息化涉及对企业管理理念的创新，按照市场发展的要求，对企业现有的管理流程重新整合，管理核心从对财务和物料的管理，转向对技术、物资和人力资源的管理，并延伸到对企业技术创新、工艺设计、产品设计、生产制造过程的管理，进而还要扩展到对客户关系和供应链的管理乃至发展到电子商务。 企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、供应链管理、主题数据库、资源管理和人力资本投资方法。不包括组织机构变革。 运用信息技术进行知识的挖掘和业务流程的管理是企业信息化建设的重要活动。 电子商务 电子商务的形式可以分为 企业对消费者 、 企业对企业 、 消费者对消费者 、线上对线下 等。 企业对消费者B2C 企业对企业B2B 消费者对消费者C2C 线上对线下O2O lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-05-19 14:03:08 "},"03系统开发方法.html":{"url":"03系统开发方法.html","title":"03系统开发方法","keywords":"","body":" 系统开发方法 软件开发方法 软件开发方法 软件开发模型[16] 逆向工程 净室软件工程 敏捷开发方法[16、14] 需求工程 需求获取 需求分析 UML图 UML关系 软件系统工具[16] 软件重用的基础知识[16] 面向构件的编程[16] 软件系统建模 系统设计 测试与评审 系统运行与软件维护 系统开发方法 [toc] 软件开发方法 软件开发方法 结构化方法：用户至上，严格区分工作阶段，系统开发过程工程化。 缺点：面向过程，比较死板 原型法：适合需求不明确的开发 面向对象方法：更好的复用性，关键在于建立一个全面、合理、统一的模型 面向服务的方法：SO方法有三个主要的抽象级别：操作、服务、业务流程 SOAD有三个层次：基础设计层、应用结构层、业务组织层 服务建模：分为服务发现、服务规约、服务实现 软件开发模型[16] 瀑布模型：瀑布模型是最早使用的软件生存周期模型之一。瀑布模型的特点是因果关系紧密相连，前一个阶段工作的结果是后一个阶段工作的输入。或者说，每一个阶段都是建立在前一个阶段的正确结果之上，前一个阶段的错误和疏漏会隐蔽地带入后一个阶段。这种错误有时甚至可能是灾难性的，因此每一个阶段工作完成后，都要进行审查和确认。适合于需求明确的项目。 演化模型：快速应用开发 增量模型：构建组装模型/给予构建的开发方法 原型模型：敏捷开发方法。抛弃型原型&演化型原型。 螺旋模型：在快速模型的基础上扩展而成。螺旋模型将整个软件开发过程分为多个阶段，每个阶段都由目标设定、风险分析、开发和有效性验证以及评审4个部分组成。螺旋模型=原型模型+瀑布模型。 喷泉模型：模型驱动的开发方法 V模型：基于架构的开发方法。强调测试重要性。 快速应用开发：瀑布模型+给予构件的开发。 逆向工程 实现级：包括程序的抽象语法树、符号表、过程的设计表示。 结构级：包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图、程序和数据结构。 功能级：包括反映程序段功能及程序段之间关系的信息，例如数据和控制流模型。 领域级：包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息，例如实体关系模型。 软件的逆向工程就是分析已有的程序，寻求比源代码更高级的抽象表现形式。一般认为，凡是在软件生命周期内将软件某种形式的描述转换成更为抽象形式的活动都可称为逆向工程。与之相关的概念是： 重构（restructuring），指在同一抽象级别上转换系统描述形式； 设计恢复（design recovery），指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计的信息（不一定是原设计）； 再工程（re-engineering），也称修复和改造工程，它是在逆向工程所获信息的基础上修改或重构已有的系统，产生系统的一个新版本。 净室软件工程 净室即无尘室、洁净室，也就是一个受控污染级别的环境。 敏捷开发方法[16、14] ​ 敏捷方法是从20世纪90年代开始逐渐引起广泛关注的一些新型软件开发方法，以应对快速变化的需求。敏捷方法的核心思想主要有以下三点。 敏捷方法是“适应性”而非“预设性”的。传统方法试图对一个软件开发项目在很长的时间跨度内做出详细的计划，然后依计划进行开发。这类方法在计划制定完成后拒绝变化。而敏捷方法则欢迎变化，其实它的目的就是成为适应变化的过程，甚至能允许改变自身来适应变化。 敏捷方法是以人为本，而不是以过程为本。传统方法以过程为本，强调充分发挥人的特性，不去限制它，并且软件开发在无过程控制和过于严格繁琐的过程控制中取得一种平衡，以保证软件的质量。 迭代增量式的开发过程。敏捷方法以原型开发思想为基础，采用迭代增量式开发，发行版本小型化。 敏捷开发方法有 XP极限编程：它源于Smalltalk圈子，特别是Kent Beck和Ward Cunningham在20世纪80年代末的密切合作。XP在一些对费用控制严格的公司中的使用，已经被证明是非常有效的。 Cockburn水晶系列方法：与XP的高度纪律性不同，Alistair探索了用最少纪律约束而仍能成功的方法，从而在产出效率与易于运作上达到一种平衡。也就是说，虽然水晶系列不如XP那样的产出效率，但会有更多的人能够接受并遵循它。 开放式源码：开放式源码项目有一个特别之处，就是程序开发人员在地域上分布很广。 SCRUM：该方法强调这样一个事实，即明确定义了的可重复的方法过程只限于在明确定义了的可重复的环境中，为明确定义了的可重复的人员所用，去解决明确定义了的可重复的问题。 Coad的功用驱动开发方法FDD：在FDD中，一个迭代周期一般是两周。在FDD中，编程开发人员分成两类：首席程序员和“类”程序员(class owner)。首席程序员是最富有经验的开发人员，他们是项目的协调者、设计者和指导者，而“类”程序员则主要做源码编写。 ASD：ASD （Adaptive Software Development）方法由Jim Highsmith提出，其核心是三个非线性的、重叠的开发阶段：猜测、合作与学习。 需求工程 需求获取 软件需求是指用户对系统在功能、行为、性能、设计约束等方面的期望。需求可以分为业务需求、用户需求和系统需求。 需求分析 UML图 UML关系 软件系统工具[16] 软件开发工具： 设计工具： 编码与排错工具： 软件维护工具：如版本控制工具 软件管理和软件支持工具：如版本管理工具和版本评价工具 软件重用的基础知识[16] 软件重用是指在两次或多次不同的软件开发过程中重复使用相同或相似软件元素的过程。 软件元素包括程序代码、测试用例、设计文档、设计过程、需求分析文档甚至领域知识。 面向构件的编程[16] 基于一般OOP风格，面向构件的编程需要下列基本的支持：多态性(可替代性)、模块封装性(高层次信息的隐藏)、后期的绑定和装载(部署独立性)和安全性(类型和模块安全性)。 软件构件是部署、版本控制和替换的基本单位。构件是一组通常需要同时部署的原子构件。原子构件通常成组地部署，但是它也能够被单独部署。构件与原子构件的区别在于，大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署。大多数原子构件都属于一个构件家族，一次部署往往涉及整个家族。一个模块是不带单独资源的原子构件。 基于构件的开发模型由软件的需求分析定义、体系结构设计、构件库建立、应用软件构建以及测试和发布5个阶段组成。 软件系统建模 系统设计 测试与评审 系统运行与软件维护 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-21 09:32:11 "},"04项目开发管理.html":{"url":"04项目开发管理.html","title":"04项目开发管理","keywords":"","body":" 项目开发管理 项目开发管理的基础知识[16] 软件文档管理[16] 软件需求管理[16] 软件过程改进[16] 软件范围管理[15、13] 软件时间管理[13] 软件配置管理[15] 系统建议方案[14] 联合需求计划[14] 软件开发环境[12] RUP 项目开发管理 [toc] 项目开发管理的基础知识[16] 项目范围管理：包括项目启动、范围计划编制、范围定义、范围核实和范围变更控制 5 个部分的内容。 项目成本管理：包括资源计划编制、成本估算、成本预算、成本控制 4 个主要部分内容。 项目时间管理：包括活动定义、活动排序、活动历时估算、进度计划编制、进度控制 5 个部分内容。 配置管理：通过技术和行政手段对产品及其开发过程和生命周期进行控制、规范的一系列措施和过程。在配置管理中，所有的配置项都应列入版本控制的范畴。配置项的状态通常有3种，分别是草稿、正式发布和正在修改。 产品配置：一个产品在其生命周期各个阶段所产生的各种形式和各种版本的文档、计算机程序、部件及数据的集合 文档包括用户文档和系统文档。 软件文档管理[16] 按照文档产生和使用的范围，软件文档大致可分为 3 类：开发文档；管理文档；产品文档。 软件需求管理[16] 需求属性：每个功能需求和它有关的一些信息。需求的稳定性属于需求属性。 变更管理过程：需求变更的管理过程遵循问题分析和变更描述、变更分析和成本计算、变更实现的顺序 变更控制委员会：变更控制委员会对项目中任何基线工作产品的变更都可以做出决定 为了达到过程能力成熟度模型的第二级，组织机构必须具有6个关键过程域（KPA）。 软件过程改进[16] CMM：软件成熟度模型。能力成熟度模型(Capability Maturity Model，CMM)描述了软件发展的演进过程，从毫无章法、不成熟的软件开发阶段到成熟软件开发阶段的过程。以CMM的架构而言，它涵盖了规划、软件工程、管理、软件开发及维护等技巧，若能确实遵守规定的关键技巧，可协助提升软件部门的软件设计能力，达到成本、时程、功能与品质的目标。CMM在软件开发机构中被广泛用来指导软件过程改进。 软件过程模型的基本概念：软件过程是制作软件产品的一组活动以及结果，这些活动主要由软件人员来完成，软件活动主要有： （1）软件描述。必须定义软件功能以及使用的限制。 （2）软件开发。也就是软件的设计和实现，软件工程人员制作出能满足描述的软件。 （3）软件有效性验证。软件必须经过严格的验证，以保证能够满足客户的需求。 （4）软件进化。软件随着客户需求的变化不断地改进。 软件范围管理[15、13] 项目范围管理，包括保证项目顺利完成所需的全部工作过程。其目的是控制项目的全部活动都在需求范围内，以确保项目资源的高效利用。 它主要包括项目启动、范围计划编制、范围定义、范围核实和范围变更控制 5 个部分的内容 产品范围是项目范围的基础，产品的范围定义是信息系统要求的度量，而项目范围的定义是生产项目计划的基础。产品范围描述是项目范围说明书的重要组成部分。 项目范围定义的输入有：①项目章程。②项目范围管理计划。③组织过程资产。④批准的变更申请。 软件时间管理[13] 项目时间管理包括使项目按时完成所必须的管理过程。 项目时间管理中的过程包括：活动定义、活动排序、活动的资源估算、活动历时估算、制定进度计划以及进度控制。 为了得到工作分解结构(Work Breakdown Structure，WBS)中最底层的交付物，必须执行一系列的活动，对这些活动的识别以及归档的过程就叫做活动定义。 软件配置管理[15] 在配置管理中，所有的配置项都应列入版本控制的范畴。配置项的状态通常有3种，分别是草稿、正式发布和正在修改。 配置项是构成产品配置的主要元素，配置项主要有以下两大类： (1) 属于产品组成部分的工作成果：如需求文档、设计文档、源代码和测试用例等； (2) 属于项目管理和机构支撑过程域产生的文档：如工作计划、项目质量报告和项目跟踪报告等。 这些文档虽然不是产品的组成部分，但是值得保存。所以设备清单不属于配置项。 系统建议方案[14] 作为一份正式文档，系统建议方案至少应该包含以下内容： ​ ①前置部分。包括标题、目录和摘要。摘要部分以1～2页的篇幅总结整个系统建议方案报告，提供系统方案中的重要事件、地点、任务和原因，以及系统方案是如何实现的等信息。 ​ ②系统概述。包括系统建议方案报告的目的、对问题的陈述、项目范围和报告内容的叙述性解释。 ​ ③系统研究方法。简要地解释系统建议方案报告中包含的信息是如何得到的，研究工作是如何进行的。 ​ ④候选系统方案及其可行性分析。系统阐述每个候选系统方案，并对每个方案进行可行性评价。 ​ ⑤建议方案。在对各个候选系统方案进行可行性评价之后，通常会推荐一个解决方案，并且要给出推荐该解决方案的理由。 ​ ⑥结论。简要地描述摘要的内容，再次指出系统开发的目标和所建议的系统方案。同时，需要再次强调项目的必要性和可行性，以及系统建议方案报告的价值。 ​ ⑦附录。系统分析师认为阅读者可能会感兴趣的所有信息，但这些信息对于理解系统建议方案报告的内容来说不是必要的。 联合需求计划[14] JRP是一个通过高度组织的群体会议来分析企业内的问题并获取需求的过程，它是联合应用开发(JAD)的一部分。 JRP的主要意图是收集需求，而不是对需求进行分析和验证。 实施JRP时应把握以下主要原则：在JRP实施之前，应制定详细的议程，并严格遵照议程进行；按照既定的时间安排进行；尽量完整地记录会议期间的内容；在讨论期间尽量避免使用专业术语；充分运用解决冲突的技能；会议期间应设置充分的间歇时间；鼓励团队取得一致意见；保证参加JRP的所有人员能够遵守实现约定的规则。 软件开发环境[12] 软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分： 环境信息库 ，用以存储与系统开发有关的信息，并支持信息的交流与共享；过程控制与消息服务器 ，是实现过程集成和控制集成的基础； 环境用户界面 ，它的统一性和一致性是软件开发环境的重要特征。 用软件开发环境(Software Development Environment)是支持软件产品开发的软件系统。它由软件工具集和环境集成机制构成。 软件工具集来支持软件开发的相关过程、活动和任务年；环境集成机制为工具集成和软件开发、维护和管理提供统一的支持，它通常包括数据集成、控制集成和界面集成。数据集成机制提供了存储或访问环境信息库的统一的数据接口规范；界面集成机制采用统一的界面形式，提供统一的操作方式；控制集成机制支持各开发活动之间的通信、切换、调度和协同工作。 软件开发环境（Software Development Environment，SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。 软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。 环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。 过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成时按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。 环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。 RUP RUP包括四个阶段：初始阶段、细化阶段、构建阶段、交付阶段。 初始阶段的任务是为系统建立业务模型并确定项目的边界。在初始阶段，必须识别所有与系统交互的外部实体，定义系统与外部实体交互的特性。在这个阶段中，所关注的是整个项目的业务和需求方面的主要风险。 细化阶段的任务是分析问题领域，建立完善的架构，淘汰项目中最高风险的元素。在细化阶段，必须在理解整个系统的基础上，对架构做出决策，包括其范围、主要功能和诸如性能等非功能需求，同时为项目建立支持环境。 在构建阶段，要开发所有剩余的构件和应用程序功能，把这些构件集成为产品，并进行详细测试。从某种意义上说，构建阶段是一个制造过程，其重点放在管理资源及控制操作，以优化成本、进度和质量。构建阶段的主要任务是通过优化资源和避免不必要的报废和返工，使开发成本降到最低；完成所有所需功能的分析、开发和测试，快速完成可用的版本；确定软件、场地和用户是否已经为部署软件作好准备。当基线已经足够完善，可以安装到最终用户实际环境中时，则进入交付阶段。 交付阶段的重点是确保软件对最终用户是可用的。交付阶段的主要任务是进行β测试，制作产品发布版本；对最终用户支持文档定稿；按用户的需求确认新系统；培训用户和维护人员；获得用户对当前版本的反馈，基于反馈调整产品，例如，进行调试、性能或可用性的增强等。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-24 15:14:06 "},"05软件架构设计.html":{"url":"05软件架构设计.html","title":"05软件架构设计","keywords":"","body":" 软件架构设计 JavaEE系统构建的基础知识[16] 软件体系结构风格的基础知识[16] 软件架构风格定义[16、13] 软件体系结构质量属性的基础知识 实现属性的架构策略[16] 特定领域体系结构的基础知识DSSA[16] 架构描述语言[15] 软件架构设计[15] 软件架构评估方法-基于场景的架构方法SAAM[15、13、09] 面向服务的架构SOA主要技术和标准： SOA例子：CORBA[16] 构件组装过程[14] “4+1”视图[14] 软件系统架构[13] 中间件[13] 结构风格与系统性能[12] 体系结构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM） 基于架构的软件设计(ABSD) 网络架构数据流图 软件架构设计 [toc] JavaEE系统构建的基础知识[16] 基于JavaEE平台的基础功能服务构建应用系统时，JDBC、JCA和Java IDL 可用来集成遗产系统。 软件体系结构风格的基础知识[16] 管道和过滤器：每个构件都有一组输入和输出，数据输入构件，经过内部处理，然后产生数据输出。数据内容的逐步分解和分阶段处理。管道-过滤器风格常常用于实现编译器。 C2：通过连接件绑定在一起的按照一组规则运作的并行构件网络。 客户/服务器风格： 三层C/S结构风格： 规则系统：一个使用模式匹配搜索来寻找规则并在正确的时候应用正确的逻辑知识的虚拟机，其支持把频繁变化的业务逻辑抽取出来，形成独立的规则库。机器人接受任务后，需要响应外界环境中触发的一些突发事件，根据自身状态进行动态调整，最终自动完成任务，使用的是规则系统架构风格。以规则为中心的虚拟机系统适合于实现专家系统。 解释器：解释器是一个用来执行其他程序的程序。解释器可针对不同的硬件平台实现一个虚拟机，将高抽象层次的程序翻译为低抽象层次所能理解的指令，以消除在程序语言与硬件之间存在的语义差异。针对业务灵活组合这一要求，采用解释器体系结构风格最为合适。可以通过部分解释代码预先编译的方式提高系统性能。 黑板：黑板体系结构风格主要由三部分组成。知识源：知识源中包含独立的、与应用程序相关的知识，知识源之间不直接进行通信，它们之间的交互只通过黑板来完成；黑板数据结构：黑板数据是按照与应用程序相关的层次来组织的解决问题的数据，知识源通过不断地改变黑板数据来解决问题；控制：控制完全由黑板的状态驱动，黑板状态的改变决定使用的特定知识。黑板风格的传统应用是信号处理领域，如语音和模式识别。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。 过程控制：其特点是不断采集系统当前状态，与系统中的设定状态进行对比，并通过将当前状态与设定状态进行对比从而进行控制。 数据仓储：特点是以软件代码为中心进行对应的编译处理与辅助操作。 过程： 层次化：划分的层次越多，系统的性能越差。 隐式调用：可以通过处理函数的并发调用提高系统处理性能。（基于图像用户界面的调试器）。在题目中提到IDE环境是一种交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现。在做一件事情时，同时触发一系列的行为，这是典型的隐式调用风格（事件驱动系统）。 面向对象：对象是通过函数和过程的调用来交互的。可以通过减少功能调用层次提高系统性能。 顺序批处理： 独立进程： 数据共享：可以针对程序的各种形态构建数据库，通过中心数据库进行转换与处理。根据上述分析，选项中列举的架构风格中，数据共享风格最符合要求。IDE是一种集成式的开发环境，在这种环境中，多种工具是围绕同一数据进行处理，这种情况适合用数据共享架构风格。 虚拟机：“模拟新操作系统的运行环境”是典型的虚拟机架构风格的特长。 软件架构风格定义[16、13] 软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。一个体系结构定义了一个词汇表和一组约束。 架构风格反映领域中众多系统所共有的结构和语义特征，强调对架构设计的重用。 架构风格定义了一类架构所共有的特征，主要包括架构定义、架构词汇表和架构架构约束。 软件体系结构质量属性的基础知识 质量属性分为 6 种：可用性、可修改性、性能、安全性、可测试性、易用性。 可修改性是指能够快速地以较高的性能价格比对系统进行变更的能力。包括可维护性、可扩展性、结构重组、可移植性4个方面。 软件架构是降低成本、改进质量、按时和按需交付产品的关键因素，软件架构设计需要满足系统的质量属性，如性能、安全性和可修改性等。 实现属性的架构策略[16] 可用性：主动冗余、心跳、Ping/Echo、 性能：资源调度、优先级队列、队列调度 安全性：追踪审计、限制访问 可修改性：接口-实现分离、信息隐藏 特定领域体系结构的基础知识DSSA[16] DSSA是在一个特定应用领域中为一组应用提供组织结构参考的软件体系结构，参与DSSA的人员可以划分为4种角色，包括领域专家、领域设计人员、领域实现人员和领域分析师，其基本活动包括领域分析、领域设计和领域实现。 领域分析者：控制整个领域分析过程，进行知识获取，将获取的知识组织到领域模型中。 领域设计者：根据领域模型和现有系统开发出DSSA，并对DSSA的准确性和一致性进行验证。 DSSA通常是一个具有三个层次的系统模型，包括领域开发环境、领域特定应用开发环境和应用执行环境，其中应用工程师主要在领域特定应用开发环境中工作。 特定领域软件架构(Domain Specific SoftwareArchitecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。 领域分析：主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求； 领域设计：主要目标是获得特定领域软件架构DSSA，DSSA描述领域模型中表示需求的解决方案； 领域实现：主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。 架构描述语言[15] 架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、连接件和架构配置。 软件架构设计[15] 软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程。架构设计主要关注软件组件的结构、属性和交互作用，并通过多种视图全面描述特定系统的架构。 软件架构评估方法-基于场景的架构方法SAAM[15、13、09] 基于场景的架构方法SAAM的主要输入是问题描述、 需求说明 和架构描述文档，其分析过程主要包括场景开发、 架构描述 、单个场景评估、场景交互和总体评估。 架构权衡分析方法ATAM：ATAM是在基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)基础之上发展起来的，主要包括场景和需求收集、架构视图和场景实现、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行评价和折中。该框架主要关注系统的需求说明，针对性能、 架构描述 、安全性和可修改性，在系统开发之前进行分析、评价与折中。ATAM可以分为4个主要的活动阶段，包括需求收集、 架构风格描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。ATAM不是一种精确的评估工具，该方法表现的主要形式是评审会议。 软件架构分析方法SAAM： 面向服务的架构SOA主要技术和标准： UDDI协议：服务注册信息通过UDDI(服务统一描述、发现和集成)框架实现 WSDL协议：服务内容描述通过WSDL(Web服务描述语言)标准实现 SOAP协议：服务提供者、服务使用者和服务注册器之间的远程交互通过SOAP(简单对象访问协议)消息实现 BPEL/SPEIAWS：通过BPEL／BPEIAWS(业务过程执行语言)将分散的、功能单一的Web服务组织成一个复杂的有机应用 SOA例子：CORBA[16] CORBA构件模型中，可移植对象适配器POA的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，伺服对象Servant是最终完成客户请求的服务对象实现。 CORBA构件模型中，对象适配器的主要作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，目前采用的对象适配器规范是POA(可移植对象适配器)，它替代了传统的BOA(基本对象适配器)。 Servant(伺服对象)是最终完成客户请求的服务对象实现，伺服对象管理器(伺服对象激活器和伺服对象定位器)用来提供CORBA服务端的对象查找服务，活动对象映射表用来保存已注册的CORBA对象标识和伺服对象之间的映射关系。 对象管理组织(OMG)基于CORBA基础设施定义了4种构件标准。实体(Entity)构件需要长期持久化并主要用于事务性行为，由容器管理其持久化。加工(Process)构件同样需要容器管理其持久化，但没有客户端可访问的主键。会话(Session)构件不需要容器管理其持久化，其状态信息必须由构件自己管理。服务(Service)构件是无状态的。 构件组装过程[14] 在构件组装过程中需要检测并解决架构失配问题。其中构件失配失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。 连接子失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。 “4+1”视图[14] ​ ①逻辑视图(Logical View)，设计的对象模型(使用面向对象的设计方法时)。用来描述设计的对象模型和对象之间的关系。 ​ ②过程视图(Process View)，捕捉设计的并发和同步特征。描述设计的并发和同步特征。 ​ ③物理视图(Physical View)，描述了软件到硬件的映射，反映了分布式特性。 ​ ④开发视图(Development View)，描述了在开发环境中软件的静态组织结构。用来描述设计的对象模型和对象之间的关系。 ​ ⑤架构的描述，即所做的各种决定，可以围绕着这四个视图来组织，然后由一些用例(Use Cases)或场景(Scenarios)来说明，从而形成了第五个视图。 ​ 当采用面向对象的设计方法描述对象模型时，通常使用类图表达类的内部属性和行为，以及类集合之间的交互关系；采用状态图定义对象的内部行为。 ​ 在该模型中，最终用户侧重于逻辑视图 ，系统工程师侧重于部署视图 。 软件系统架构[13] 软件系统架构是关于软件系统的结构、行为和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的交互关系。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和拓扑结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。 中间件[13] 中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。 软件中间件的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户开发和集成应用软件。它不仅仅要实现互连，还要实现应用之间的互操作。 结构风格与系统性能[12] 对于采用层次化架构风格的系统，划分的层次越多，系统完成某项功能需要的中间调用操作越多，其性能越差。 对于采用管道．过滤器架构风格的系统，可以通过引入过滤器的数据并发处理可以有效提高系统性能。 对于采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能。 对于采用过程调用架构风格的系统，将显式调用策略替换为隐式调用策略能够提高系统的灵活性，但会降低系统的性能。 体系结构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM） 场景和需求收集 体系结构视图和场景实现、 属性模型构造和分析 折中 基于架构的软件设计(ABSD) 基于架构的软件设计（ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。 使用ABSD方法，设计活动可以从项目总体功能框架明确就开始，并且设计活动的开始并不意味着需求抽取和分析活动可以终止，而是应该与设计活动并行。ABSD方法有三个基础：第一个基础是功能分解，在功能分解中使用已有的基于模块的内聚和耦合技术。第二个基础是通过选择体系结构风格来实现质量和商业需求。第三个基础是软件模板的使用。ABSD方法是一个自顶向下，递归细化的过程，软件系统的架构通过该方法得到细化，直到能产生软件构件的类。 网络架构数据流图 应用架构建模中要绘制的第一个物理数据流图（PDFD）是网络架构DFD，它们不显示单位时间的数据流量，需要显示的信息包括服务器及其物理位置；客户端及其物理位置；处理器说明；传输协议。 早期的编译器采用管道-过滤器架构风格，并且大多数编译器在词法分析时创造独立的符号表，在其后的阶段会不断修改符号表，因此符号表并不是程序数据的一部分。现代的编译器采用以数据共享为中心的架构风格，主要关心编译过程中程序的中间表示。现代的编译器采用以数据共享为中心的架构风格，分析树是在语法分析阶段结束后才产生作为语义分析的输入，分析树是数据中心中重要的共享数据，为后续的语义分析提供了帮助。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-10-01 18:50:09 "},"06面向对象系统建模.html":{"url":"06面向对象系统建模.html","title":"06面向对象系统建模","keywords":"","body":" 面向对象系统建模 面向对象的分析模型[16] 用例之间的关系： 类之间的关系[16] 简要说明状态图和活动图的含义及其区别[15] 依赖倒置原则 面向对象设计中的类[13] 架构文档化[13] 里氏替换原则: 最少知识原则[11] 基于MVC的J2EE架构[09] 面向对象系统建模 [toc] 面向对象的分析模型[16] 面向对象设计的基本任务，把面向对象分析模型转换为面向对象设计模型。 面向对象的分析模型主要由顶层架构图、用例与用例图、领域概念模型构成；设计模型则包含以包图表示的软件体系结构图、以交互图表示的用例实现图、完整精确的类图、针对复杂对象的状态图和描述流程化处理过程的活动tu等。 用例之间的关系： 用例之间的关系主要有包含、扩展和泛化，利用这些关系，把一些公共的信息抽取出来，以便于复用，使得用例模型更易于维护。 包含关系。当可以从两个或两个以上的用例中提取公共行为时，应该使用包含关系来表示它们。其中这个提取出来的公共用例称为抽象用例，而把原始用例称为基本用例或基础用例。 扩展关系。如果一个用例明显地混合了两种或两种以上的不同场景，即根据情况可能发生多种分支，则可以将这个用例分为一个基本用例和一个或多个扩展用例，这样使描述可能更加清晰。 泛化关系。当多个用例共同拥有一种类似的结构和行为的时候，可以将它们的共性抽象成为父用例，其他的用例作为泛化关系中的子用例。在用例的泛化关系中，子用例是父用例的一种特殊形式，子用例继承了父用例所有的结构、行为和关系。 用例“会员注册”和“电话注册”、“邮件注册”之间是泛化关系。 类之间的关系[16] 类之间的关系：关联(Association)、聚集(Aggregation)、组合(Composition)、泛化(Generalization)、依赖(Dependence)。 类University与类Student之间的关系是聚集(Aggregation)关系；类University和类Department之间的关系是组合(Composition)关系；类Student和类Course之间的关系是关联(Association)关系。 (1)关联提供了类之间的结构关系，将多个类的实例连接在一起。 (2)依赖关系表示一个类的变化可能会影响另一个类。 (3)泛化关系描述了一般事物与该事物中的特殊种类之间的关系。 (4)聚集关系表示类之间整体与部分的关系，其含义是部分可能同时属于多个整体，两者生命周期可以不相同。 (5)组合关系表示类之间的整体与部分关系，部分只能属于一个整体，两者具有相同的生存周期。 简要说明状态图和活动图的含义及其区别[15] 状态图：用来描述一个特定对象的所有可能状态以及其引起状态转移的事件。 活动图：用来描述操作的行为，也用于描述用例和对象内部的工作过程。 两者有本质区别： 状态图和活动图用于不同的目的。 状态图着重描述一系列的状态及状态间的转移，状态间的变迁需要外部事件的触发。 活动图用于捕获动作及动作的结果，活动图中一个活动结束将立即进入下一个活动，是内部处理驱动的流程。 依赖倒置原则 依赖倒置原则是指抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。在程序代码中传递参数时或在组合(或聚合)关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明和方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。为了确保该原则的应用，一个具体类应当只实现接口和抽象类中声明过的方法，而不要给出多余的方法，否则，将无法调用到在子类中增加的新方法。 面向对象设计中的类[13] 在面向对象设计中，类可以分为三种类型：实体类、边界类和控制类。 ​ ①实体类映射需求中的每个实体，实体类保存需要存储在永久存储体中的信息。实体类是对用户来说最有意义的类，通常采用业务领域术语命名，一般来说是一个名词，在用例模型向领域模型转化中，一个参与者一般对应于实体类。 ​ ②控制类是用于控制用例工作的类，一般是由动宾结构的短语(“动词+名词”或“名词+动词”)转化来的名词。控制类用于对一个或几个用例所特有的控制行为进行建模，控制对象通常控制其他对象，因此它们的行为具有协调性。作为完成用例业务的责任承担者，协调、控制其他类共同完成用例规定的功能或行为。 ​ ③边界类用于封装在用例内、外流动的信息或数据流。边界类是一种用于对系统外部环境与其内部运作之间的交互进行建模的类。边界对象将系统与其外部环境的变更隔离开，使这些变更不会对系统其他部分造成影响。它可以实现界面控制、外部接口和环境隔离。 架构文档化[13] 软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。 架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。 架构文档化的主要输出结果是架构规格说明书和架构质量说明书。 里氏替换原则: 里氏替换原则是面向对象设计原则之一，由Barbara liskov提出，其基本思想是，一个软件实体如果使用的是一个基类对象，那么一定适用于其子类对象，而且觉察不出基类对象和子类对象的区别，即把基类都替换成它的子类，程序的行为没有变化。反过来则不一定成立，如果一个软件实体使用的是一个子类对象，那么它不一定适用于基类对象。 在运用里氏替换原则时，尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者接口，并将其作为基类，在程序中尽量使用基类对象进行编程。由于子类继承基类并实现其中的方法 最少知识原则[11] 最少知识原则(也称为迪米特法则)是面向对象设计原则之一，指一个软件实体应当尽可能少地与其他实体发生相互作用。这样，当一个实体被修改时，就会尽可能少地影响其他的实体。 ①在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用。一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波动。 ②在类的结构设计上，每个类都应当尽量降低其属性和方法的访问权限。 ③在类的设计上，只要有可能，一个类型应当设计成不变类。 ④在对其他类的引用上，一个对象对其他对象的引用应当降到最低。 基于MVC的J2EE架构[09] JSP构件：系统界面 Servlet：分发客户请求、有效组织其他构件为客户端提供服务的控制器 Entity Bean：数据库相关操作 Session Bean：系统核心业务逻辑 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-05-19 14:03:26 "},"07设计模式.html":{"url":"07设计模式.html","title":"07设计模式","keywords":"","body":" 设计模式 设计模式实例[16] 创建型模式 结构型模式 行为型模式 包装器外观(Wrapper Facade)设计模式[14] 设计模式 [toc] 设计模式实例[16] 按照设计模式的目的进行划分，现有的设计模式可以分为创建型、结构型和行为型三种模式。设计模式具有适应需求变化的优点。 创建型模式：abstractfactory、builder构造器模式、factorymethod、prototype原型模式、singleton等， 结构型模式：adaptor适配器模式、bridge桥接模式、composite组合模式、decorator装饰器模式、facade外观模式、flyweight和proxy代理模式， 行为型模式：chain of responsibility责任链、command命令模式、interpreter解释器模式、iterator迭代器模式、mediator中介者模式、memento备忘录模式、observer观察者模式、state状态模式、strategy策略模式、template method、visitor访问者模式等。 创建型模式 abstractfactory： builder构造器模式： factorymethod： prototype原型模式： singleton： 结构型模式 adaptor适配器模式： bridge桥接模式：bridge桥接模式可以将一个复杂的组件分成功能性抽象和内部实现两个独立的但又相关的继承层次结构，改变组件的这两个层次结构很简单，以至于它们可以互相独立地变化，采用bridge模式可以将接口与实现分离，提高了可扩展性，并对客户端隐藏了实现的细节。桥接模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。 composite组合模式： decorator装饰器模式：能够动态地对一个对象进行功能上的扩展，也可以对其子类进行功能上的扩展。 facade外观模式：外观(facade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 flyweight： proxy代理模式：解决直接访问对象时带来的问题。 例如，要访问的对象在远程的机器上；对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问等。 行为型模式 chain of responsibility责任链：针对每一个词需要对内容进行分析与过滤，而且需要支持敏感词处理的灵活添加。 interpreter解释器模式：解释器模式属于类的行为模式，描述了如何为语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子，这里的“语言”是使用规定格式和语法的代码。 strategy策略模式：策略模式是一种对象的行为型模式，定义一系列算法，并将每个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，其目的是将行为和环境分隔，当出现新的行为时，只需要实现新的策略类。 mediator中介者模式：中介者模式是一种对象的行为行模式，通过一个中介对象来封装一系列的对象交互。中介者使得各对象不需要现实地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者对象的存在保证了对象结构上的稳定，也就说说系统的结构不会因为新对象的引入带来大量的修改工作。 iterator迭代器模式：迭代器模式是一种对象的行为型模式，提供了一种方法来访问聚合对象，而不用暴露这个对象的内部表示。迭代器模式支持以不同的方式遍历一个聚合对象。 memento备忘录模式： visitor访问者模式：对某个具有固定结构的活动节点需要多种处理能力，且处理能力可扩展，也就是说要求在不改变原来类结构(活动节点)的基础上增加新功能。 command命令模式：命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。 state状态模式：状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化 包装器外观(Wrapper Facade)设计模式[14] 某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给(操作系统API函数)，调用成功后将结果返回。使用该模式(提高了底层代码访问的一致性，但降低了服务端程序的调用性能)。 架构设计的目标是确定应用软件的哪些部分将被分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是数据存储。大多数信息系统需要数据进行存储并检索，无论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是数据访问逻辑，处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是应用程序逻辑，这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是客户机、服务器和网络。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-21 08:56:06 "},"08信息安全技术.html":{"url":"08信息安全技术.html","title":"08信息安全技术","keywords":"","body":" 信息安全技术 DES加密算法的基础知识[16] 数字签名的基础知识： 网络攻击的基础知识： 身份认证与访问控制[13] TCP/IP漏洞攻击[14] 信息安全策略[09] 加密算法[09] 信息安全技术 [toc] DES加密算法的基础知识[16] DES加密算法使用56位的密钥以及附加的8位奇偶校验位(每组的第8位作为奇偶校验位)，产生最大64位的分组大小。这是一个迭代的分组密码，将加密的文本块分成两半。使用子密钥对其中一半应用循环功能，然后将输出与另一半进行“异或”运算；接着交换这两半，这一过程会继续下去，但最后一个循环不交换。DES使用16轮循环，使用异或，置换，代换，移位操作四种基本运算。三重DES所使用的加密密钥长度为112位。 数字签名的基础知识： 网络攻击的基础知识： 网络攻击有主动攻击和被动攻击两类。 主动攻击是指通过一系列的方法，主动地向被攻击对象实施破坏的一种攻击方式，例如重放攻击、IP地址欺骗、拒绝服务攻击等均属于攻击者主动向攻击对象发起破坏性攻击的方式。 流量分析攻击是通过持续检测现有网络中的流量变化或者变化趋势，而得到相应信息的一种被动攻击方式。 身份认证与访问控制[13] 第三方认证服务的两种体制分别是Kerberos和PKI 采用Kerberos系统进行认证时，可以在报文中加入( 时间戳 )来防止重放攻击。 Kerberos认证服务中保存数字证书的服务器叫KDC PKI的中文全称是“公钥基础设施” PKI认证服务中保存数字证书的服务器叫CA PKI认证服务中负责验证用户身份的是注册机构RA TCP/IP漏洞攻击[14] Land攻击、Ping ofDeath、Teardrop攻击 信息安全策略[09] 信息安全策略应该全面地保护信息系统整体的安全，网络安全体系设计是网络逻辑设计工作的重要内容之一，可从物理线路安全、网络安全、系统安全、应用安全等方面来进行安全体系的设计与规划。其中，数据库的容灾属于系统安全与应用安全的内容。 加密算法[09] 加密算法中，对称加密比非对称加密效率要高。 RSA和ECC属于非对称加密算法，MD5为摘要算法，故选择RC-5。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-05-19 14:03:34 "},"09知识产权保护.html":{"url":"09知识产权保护.html","title":"09知识产权保护","keywords":"","body":" 知识产权保护 知识产权的基础知识： 标准与标准化基本知识[12] 商标注册 知识产权保护 [toc] 知识产权的基础知识： 软件著作权保护的对象是指著作权法保护的计算机软件，包括计算机程序及其有关文档。 计算机程序是指为了得到某种结果而可以由计算机等具有信息处理能力的装置执行的代码化指令序列，或可被自动转换成代码化指令序列的符号化指令序列或符号化语句序列，通常包括源程序和目标程序。 软件文档是指用自然语言或者形式化语言所编写的文字资料和图表，以用来描述程序的内容、组成、设计、功能、开发情况、测试结果及使用方法等，如程序设计说明书、流程图、数据流图、用户手册等。 《计算机软件保护条例》对软件著作权的保护只是针对计算机软件和文档，并不包括开发软件所用的思想、处理过程、操作方法或数学概念等。 计算机的知识产权为50年 著作权是指作者及其他著作权人对其创作(或继受)的文学艺术和科学作品依法享有的权利，即著作权权利人所享有的法律赋予的各项著作权及相关权的总和。 标准与标准化基本知识[12] 国家标准：强制性国家标准代号为GB，推荐性国家标准的代号为GB／T。 行业标准：已正式公布的行业代号：OJ(航天)、SJ(电子)、JB(机械)、JR(金融)、HB(航空)等等。 地方标准：地方标准代号由大写汉字拼音DB加上省、自治区、直辖市行政区划代码的前两位数子(北京市11、天津市12)，再加上斜线T组成推荐性地方标准(DBXX／T)，不加斜线T为强制性地方标准(DBXX)。 企业标准：企业代号可用大写拼音字母或阿拉数字或两者兼用所组成(Q／XXX) 商标注册 商标注册是指商标所有人为了取得商标专用权，将其使用的商标，依照法律的注册条件、原则和程序，向商标局提出注册申请，商标局经过审核，准予注册的法律制度。 注册商标时使用的商标标识须具备可视特征，且不得与他人先取得的合法权力相冲突，不得违反公序良俗。 具备可视性（显著性），要求必须为视觉可感知，可以是平面的文字、图形、字母、数字，也可以是三维立体标志或者颜色组合以及上述要素的组合。显著性要求商标的构成要素必须便于区别。但怎样的文字、图形和三维标志是具有显著特征的，我国商标法一般是从反面作出禁止性规定，凡是不含有禁用要素的商标（如同中华人民共和国的国旗、国徽相同或相近似的标识），就被视为具备显著性。显著性特征一般是指易于识别，即不能相同或相似。相同是指用于同一种或类似商品上的两个商标的文字、图形、字母、数字、三维标志或颜色组合相同。读音相同也属于相同商标，如“小燕”与“小雁”、“三九”与“999”属于相同商标。近似是指在文字的字形、读音、含义或者图形的构图及颜色或者文字与图形的整体结构上，与注册商标相比，易使消费者对商品的来源产生误认的商标。如虎、豹、猫图案外观近似；“娃哈哈”与“娃娃哈”读音近似；“长城”与“八达岭”，虽然读音、文字都不近似，但其所指的事物非常近似，其思想主题相同，也会引起消费者的误认。 所以在本题中“用有”与“用友”属于相同商标。相同商标注册遵循的原则是谁先申请谁拥有，同时（同一天）申请则看谁先使用，如果无法判断可以通过协商来确定归属，协商不成可抽签决定结果。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-24 15:13:01 "},"10系统开发方法.html":{"url":"10系统开发方法.html","title":"10系统开发方法","keywords":"","body":" 系统开发方法 项目开发管理的基础知识[16] 软件文档管理[16] 软件需求管理[16] 软件过程改进[16] 软件范围管理[15、13] 软件时间管理[13] 软件配置管理[15] 系统建议方案[14] 联合需求计划[14] 软件开发环境[12] 系统开发方法 [toc] 项目开发管理的基础知识[16] 项目范围管理：包括项目启动、范围计划编制、范围定义、范围核实和范围变更控制 5 个部分的内容。 项目成本管理：包括资源计划编制、成本估算、成本预算、成本控制 4 个主要部分内容。 项目时间管理：包括活动定义、活动排序、活动历时估算、进度计划编制、进度控制 5 个部分内容。 配置管理：通过技术和行政手段对产品及其开发过程和生命周期进行控制、规范的一系列措施和过程。在配置管理中，所有的配置项都应列入版本控制的范畴。配置项的状态通常有3种，分别是草稿、正式发布和正在修改。 产品配置：一个产品在其生命周期各个阶段所产生的各种形式和各种版本的文档、计算机程序、部件及数据的集合 文档包括用户文档和系统文档。 软件文档管理[16] 按照文档产生和使用的范围，软件文档大致可分为 3 类：开发文档；管理文档；产品文档。 软件需求管理[16] 需求属性：每个功能需求和它有关的一些信息。需求的稳定性属于需求属性。 变更管理过程：需求变更的管理过程遵循问题分析和变更描述、变更分析和成本计算、变更实现的顺序 变更控制委员会：变更控制委员会对项目中任何基线工作产品的变更都可以做出决定 为了达到过程能力成熟度模型的第二级，组织机构必须具有6个关键过程域（KPA）。 软件过程改进[16] CMM：软件成熟度模型。能力成熟度模型(Capability Maturity Model，CMM)描述了软件发展的演进过程，从毫无章法、不成熟的软件开发阶段到成熟软件开发阶段的过程。以CMM的架构而言，它涵盖了规划、软件工程、管理、软件开发及维护等技巧，若能确实遵守规定的关键技巧，可协助提升软件部门的软件设计能力，达到成本、时程、功能与品质的目标。CMM在软件开发机构中被广泛用来指导软件过程改进。 软件范围管理[15、13] 项目范围管理，包括保证项目顺利完成所需的全部工作过程。其目的是控制项目的全部活动都在需求范围内，以确保项目资源的高效利用。 它主要包括项目启动、范围计划编制、范围定义、范围核实和范围变更控制 5 个部分的内容 产品范围是项目范围的基础，产品的范围定义是信息系统要求的度量，而项目范围的定义是生产项目计划的基础。产品范围描述是项目范围说明书的重要组成部分。 项目范围定义的输入有：①项目章程。②项目范围管理计划。③组织过程资产。④批准的变更申请。 软件时间管理[13] 项目时间管理包括使项目按时完成所必须的管理过程。 项目时间管理中的过程包括：活动定义、活动排序、活动的资源估算、活动历时估算、制定进度计划以及进度控制。 为了得到工作分解结构(Work Breakdown Structure，WBS)中最底层的交付物，必须执行一系列的活动，对这些活动的识别以及归档的过程就叫做活动定义。 软件配置管理[15] 在配置管理中，所有的配置项都应列入版本控制的范畴。配置项的状态通常有3种，分别是草稿、正式发布和正在修改。 配置项是构成产品配置的主要元素，配置项主要有以下两大类： (1) 属于产品组成部分的工作成果：如需求文档、设计文档、源代码和测试用例等； (2) 属于项目管理和机构支撑过程域产生的文档：如工作计划、项目质量报告和项目跟踪报告等。 这些文档虽然不是产品的组成部分，但是值得保存。所以设备清单不属于配置项。 系统建议方案[14] 作为一份正式文档，系统建议方案至少应该包含以下内容： ​ ①前置部分。包括标题、目录和摘要。摘要部分以1～2页的篇幅总结整个系统建议方案报告，提供系统方案中的重要事件、地点、任务和原因，以及系统方案是如何实现的等信息。 ​ ②系统概述。包括系统建议方案报告的目的、对问题的陈述、项目范围和报告内容的叙述性解释。 ​ ③系统研究方法。简要地解释系统建议方案报告中包含的信息是如何得到的，研究工作是如何进行的。 ​ ④候选系统方案及其可行性分析。系统阐述每个候选系统方案，并对每个方案进行可行性评价。 ​ ⑤建议方案。在对各个候选系统方案进行可行性评价之后，通常会推荐一个解决方案，并且要给出推荐该解决方案的理由。 ​ ⑥结论。简要地描述摘要的内容，再次指出系统开发的目标和所建议的系统方案。同时，需要再次强调项目的必要性和可行性，以及系统建议方案报告的价值。 ​ ⑦附录。系统分析师认为阅读者可能会感兴趣的所有信息，但这些信息对于理解系统建议方案报告的内容来说不是必要的。 联合需求计划[14] JRP是一个通过高度组织的群体会议来分析企业内的问题并获取需求的过程，它是联合应用开发(JAD)的一部分。 JRP的主要意图是收集需求，而不是对需求进行分析和验证。 实施JRP时应把握以下主要原则：在JRP实施之前，应制定详细的议程，并严格遵照议程进行；按照既定的时间安排进行；尽量完整地记录会议期间的内容；在讨论期间尽量避免使用专业术语；充分运用解决冲突的技能；会议期间应设置充分的间歇时间；鼓励团队取得一致意见；保证参加JRP的所有人员能够遵守实现约定的规则。 软件开发环境[12] 软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分： 环境信息库 ，用以存储与系统开发有关的信息，并支持信息的交流与共享；过程控制与消息服务器 ，是实现过程集成和控制集成的基础； 环境用户界面 ，它的统一性和一致性是软件开发环境的重要特征。 用软件开发环境(Software Development Environment)是支持软件产品开发的软件系统。它由软件工具集和环境集成机制构成。 软件工具集来支持软件开发的相关过程、活动和任务年；环境集成机制为工具集成和软件开发、维护和管理提供统一的支持，它通常包括数据集成、控制集成和界面集成。数据集成机制提供了存储或访问环境信息库的统一的数据接口规范；界面集成机制采用统一的界面形式，提供统一的操作方式；控制集成机制支持各开发活动之间的通信、切换、调度和协同工作。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-07-21 09:08:41 "},"11嵌入式系统设计.html":{"url":"11嵌入式系统设计.html","title":"11嵌入式系统设计","keywords":"","body":" 嵌入式系统设计 嵌入式系统基础知识[16] 嵌入式处理器[16] 嵌入式操作系统-板级支持包BSP[15] 嵌入式操作系统的特点[15] 嵌入式数据库管理系统[14] [14]嵌入式处理器： [13]可行性分析： [12]嵌入式系统硬件抽象层： [12]嵌入式实时操作系统实时性的评价指标： 嵌入式系统设计 [toc] 嵌入式系统基础知识[16] PCI总线标准是一种局部并行总线标准，常用来表示个人计算机中使用最为广泛的接口，几乎所有的主板产品上都带有这种插槽。 GUI(Graphical User Interface)常用来表示采用图形方式显示的计算机操作用户界面。 API(Application Programming Interface，应用程序编程接口)是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，开发人员无须访问源码(或理解内部工作机制的细节)。 PCI是一种局部总线标准，它是在CPU和原来的系统总线之间插入的一级总线，具体由一个桥接电路实现对这一层的管理，并实现上下之间的接口以协调数据的传送。 JTAG是一个调试接口，用来供开发人员调试CPU的工作状态。JTAG软件通过该接口控制CPU来调试CPU以及读写Flash。 嵌入式处理器[16] 嵌入式处理器是嵌入式系统的核心部件，一般可分为嵌入式微处理器(MPU)、微控制器(MCU)、数字信号处理器(DSP)和片上系统(SOC)。 嵌入式微处理器(EMPU)是嵌入式系统硬件层的核心，大多工作在为特定用户群专用设计的系统中，它将通用CPU中许多由板卡完成的任务集成在芯片内部，从而有利于嵌入式系统在设计时趋于小型化，同时还具有很高的效率和可靠性。 嵌入式微控制器(EMCU)的典型代表是单片机，单片机从诞生之日起，称为嵌入式微控制器。它体积小，结构紧凑，作为一个部件安装在所控制的装置中，主要执行信号控制的功能。 数字信号处理器(DSP)由大规模或超大规模集成电路芯片组成，是用来完成某种信号处理任务的处理器。它是为适应高速实时信号处理任务的需要而逐渐发展起来的。随着集成电路技术和数字信号处理算法的发展，数字信号处理器的实现方法也在不断变化，处理能力不断提高。 片上系统(SOC)指的是在单个芯片上集成一个完整的系统，一般包括中央处理器(CPU)、存储器，以及外围电路等。SOC是与其他技术并行发展的，如绝缘硅(SOI)，它可以提供增强的时钟频率，从而降低微芯片的功耗。 嵌入式操作系统-板级支持包BSP[15] 在嵌入式系统中，板级支持包Board Support Package(简称BSP)是对硬件抽象层的实现，是介于主板的硬件和操作系统驱动程序之间的一层，为整个软件系统提供底层硬件支持，是介于底层硬件和上层软件之间的底层软件开发包，它主要的功能是给上层提供统一接口，同时屏蔽各种硬件底层的差异，以及提供操作系统的驱动及硬件驱动。简单地说，就是BSP包含了所有与硬件有关的代码，为操作系统提供了硬件平台无关性。 在嵌入式操作系统中，板级支持包BSP作为对硬件的抽象，实现了硬件有关性，操作系统无关性。 嵌入式操作系统的特点[15] 嵌入式操作系统是应用于嵌入式系统，实现软硬件资源的分配，任务调度，控制、协调并发活动等的操作系统软件。 它除了具有一般操作系统最基本的功能如多任务调度、同步机制等之外，通常还会具备以下适用于嵌入式系统的特性： 面向应用，可以进行检查和移植，以支持开放性和可伸缩性的体系结构； 强实时性，以适应各种控制设备及系统； 硬件适用性，对于不同硬件平台提供有效的支持并实现统一的设备驱动接口； 高可靠性，运行时无须用户过多干预，并处理各类事件和故障； 编码体积小，通常会固化在嵌入式系统有限的存储单元中。 嵌入式系统的软件设计除了需要考虑一般软件设计的基本要求之外，通常都会要求嵌入式系统软件具有良好的可移植性，以实现对不同硬件平台的适用性，这就要求基于硬件抽象层的系统软件设计特性实现对上层软件的统一接口，做到硬件无关性。 在嵌入式系统开发中，由于嵌入式设备不具备足够的处理器能力和存储空间，程序开发一般用PC(宿主机)来完成，然后将可执行文件下载到嵌入式系统(目标机)中运行。 当宿主机与目标机的机器指令不同时，就需要交叉工具链(指编译、汇编、链接等一整套工具)。 嵌入式数据库管理系统[14] 嵌入式数据库管理系统一般只为前端应用提供基本的数据支持 嵌入式数据库管理系统一般支持实时数据的管理 嵌入式数据库管理系统一般支持多线程并发操作 嵌入式数据库管理系统一般只提供本机服务接口 [14]嵌入式处理器： MMU是存储器管理单元的缩写，是用来管理虚拟内存系统的器件。MMU通常是CPU的一部分，本身有少量存储空间存放从虚拟地址到物理地址的匹配表。此表称作TLB(转换旁置缓冲区)。所有数据请求都送往MMU，由MMU决定数据是在RAM内还是在大容量存储器设备内。如果数据不在存储空间内，MMU将产生页面错误中断。 ​ MMU的两个主要功能是将虚地址转换成物理地址，控制存储器存取允许。MMU关掉时，虚地址直接输出到物理地址总线。 ​ Cortex—M3处理器采用ARMv7一M架构，它包括所有的16位Thumb指令集和基本的32位Thumb-2指令集架构。Cortex-M3支持线程模式和处理模式。在复位时处理器进入“线程模式”，异常返回时也会进入该模式，特权和用户(非特权)模式代码能够在“线程模式”下运行。出现异常模式时处理器进入“处理模式”，在处理模式下，所有代码都是特权访问的。 嵌入式操作系统μC／OS-II可以运行在Cortex-M3处理器上。 [13]可行性分析： 可行性研究通常从经济可行性、技术可行性、法律可行性和用户使用可行性4个方面来进行分析。 [12]嵌入式系统硬件抽象层： 硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化。 它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟硬件平台，使其具有硬件无关性，可在多种平台上进行移植。 [12]嵌入式实时操作系统实时性的评价指标： ​ 一个嵌入式实时操作系统(RTOS)的评价要从很多角度进行，如体系结构、API的丰富程度、网络支持、可靠性等。其中，实时性是RTOS评价的最重要的指标之一，实时性的优劣是用户选择操作系统的一个重要参考。 ​ 严格地说，影响嵌入式操作系统实时性的因素有很多，如常用系统调用平均运行时间、任务切换时间、线程切换时间、信号量混洗时间(指从一个任务释放信号量到另一个等待该信号量的任务被激活的时间延迟)、中断响应时间等。 ​ 任务执行时间不是反映RTOS实时性的评价指标。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-01-30 15:08:50 "},"12软件测试相关知识.html":{"url":"12软件测试相关知识.html","title":"12软件测试相关知识","keywords":"","body":" 软件测试相关知识 软件测试的基础知识[16] 软件项目范围管理方面的基础知识： 遗留系统的处理方法[15] 静态测试[14、12] 动态测试[12] 单元测试[14] ANSI／IEEE 1471-2000标准：[12] 软件维护[11] 软件测试相关知识 [toc] 软件测试的基础知识[16] 软件集成测试也称为组装测试、联合测试(对于子系统而言，则称为部件测试)。它将已通过单元测试的模块集成在一起，主要测试模块之间的协作性。从组装策略而言，可以分为一次性组装测试和增量式组装(包括自项向下、自底向上及混合式)两种。集成测试计划通常是在软件概要设计阶段完成的，集成测试一般采用黑盒测试方法。 根据国家标准GB／T 15532-2008，软件测试可分为单元测试、集成测试、配置项测试、系统测试、验收测试和回归测试等类别。 单元测试也称为模块测试，测试的对象是可独立编译或汇编的程序模块、软件构件或面向对象软件中的类(统称为模块)，其目的是检查每个模块能否正确地实现设计说明中的功能、性能、接口和其他设计约束等条件，发现模块内可能存在的各种差错。单元测试的技术依据是软件详细设计说明书。 集成测试的目的是检查模块之间，以及模块和已集成的软件之间的接口关系，并验证已集成的软件是否符合设计要求。集成测试的技术依据是软件概要设计文档。 系统测试的对象是完整的、集成的计算机系统，系统测试的目的是在真实系统工作环境下，验证完整的软件配置项能否和系统正确连接，并满足系统／子系统设计文档和软件开发合同规定的要求。系统测试的技术依据是用户需求或开发合同。 常见的系统测试主要有恢复测试、安全性测试、压力测试、性能测试、可靠性测试、可用性测试、可维护性测试和安装测试。不包括路径测试。 配置项测试的对象是软件配置项，配置项测试的目的是检验软件配置项与软件需求规格说明的一致性。 确认测试主要验证软件的功能、性能和其他特性是否与用户需求一致。验收测试是指针对软件需求规格说明，在交付前以用户为主进行的测试。 回归测试的目的是测试软件变更之后，变更部分的正确性和对变更需求的复合型，以及软件原有的、正确的功能、性能和其他规定的要求的不损害性。 测试一个模块时，可能需要为该模块编写一个驱动模块和若干个桩模块。驱动模块用来调用被测模块，它接收测试者提供的测试数据，并把这些数据传送给被测模块，然后从被测模块接收测试结果，并以某种可见的方式将测试结果返回给测试人员；桩模块用来模拟被测模块所调用的子模块，它接受被测模块的调用，检验调用参数，并以尽可能简单的操作模拟被调用的子程序模块功能，把结果送回被测模块。顶层模块测试时不需要驱动模块，底层模块测试时不要桩模块。 软件项目范围管理方面的基础知识： ​ 项目范围是为了达到项目目标，为了交付具有某种特制的产品和服务，项目所规定要做的。在信息系统项目中，产品范围是指信息系统产品或者服务所应该包含的功能，项目范围是指为了能够交付信息系统项目所必须做的工作。产品范围是项目范围的基础，产品的范围定义是信息系统要求的度量，而项目范围的定义是生产项目计划的基础。产品范围描述是项目范围说明书的重要组成部分。 遗留系统的处理方法[15] ​ ①淘汰策略。第四象限为低水平、低价值区，即遗留系统的技术含量较低，且具有较低的业务价值。 ​ ②继承策略。第二象限为低水平、高价值区，即遗留系统的技术含量较低，已经满足企业运作的功能或性能要求，但具有较高的商业价值，目前企业的业务尚紧密依赖该系统。 ​ ③改造策略。第一象限为高水平、高价值区，即遗留系统的技术含量较高，本身还有强大的生命力。系统具有较高的业务价值，基本上能够满足企业业务运作和决策支持的需要。 ​ ④集成策略。第三象限为高水平、低价值区，即遗留系统的技术含量较高，但其业务价值较低，可能只完成某个部门(或子公司)的业务管理。 静态测试[14、12] ​ 静态测试是指被测试程序不在机器上运行，而采用人工检测和计算机辅助静态分析的手段对程序进行检测。 ​ 静态测试工具可用于对软件需求、结构设计、详细设计和代码进行评审、走查和审查。 ​ 静态测试工具可对软件的复杂度分析、数据流分析、控制流分析和接口分析提供支持。 ​ 静态测试包括对文档的静态测试和对代码的静态测试。对代码的静态测试包括控制流分析、数据流分析、接口分析和表达式分析。 ​ ①控制流分析。控制流分析是指使用控制流程图检查被测程序控制结构的过程。例如，可检查被测程序是否存在没有使用的语句或子程序、是否调用并不存在的子程序，以及是否存在无法达到的语句等。 ​ ②数据流分析。数据流分析是指使用控制流程图分析数据各种异常情况的过程，包括数据初始化、赋值或引用过程中的异常。例如，引用未定义的变量、对以前未使用的变量再次赋值等程序差错或异常情况。 ​ ③接口分析。接口分析主要包括模块之间接口的一致性分析、模块与外部数据库及其他软件配置项之间的一致性分析、子程序和函数之间的接口一致性分析等。例如可以检查函数形参与实现的数量、顺序、类型和使用的一致性。 ​ ④表达式分析。表达式分析用于检查程序代码中的表达式错误。例如，括号不配对、数组引用越界、除数为零，以及浮点数变量比较时的误差等错误。 动态测试[12] 动态测试需要运行被测试系统，并设置探针，向代码生成的可执行文件中插入检测代码，可用于软件的覆盖分析和性能分析，也可用于软件的模拟、建模、仿真测试和变异测试等。 单元测试[14] 单元测试策略主要包括自顶向下的单元测试、自底向上的单元测试、孤立测试和综合测试策略。 ​ ①自顶向下的单元测试先测试上层模块，再测试下层模块。测试下层模块时由于它的上层模块己测试过，所以不必另外编写驱动模块。 ​ ②自底向上的单元测试。自底向上的单元测试先测试下层模块，再测试上层模块。测试上层模块由于它的下层模块已经测试过，所以不必另外编写桩模块。 ​ ③孤立测试不需要考虑每个模块与其他模块之间的关系，逐一完成所有模块的测试。由于各模块之间不存在依赖性，单元测试可以并行进行，但因为需要为每个模块单独设计驱动模块和桩模块，增加了额外的测试成本。 ​ ④综合测试。上述三种单元测试策略各有利弊，实际测试时可以根据软件特点和进度安排情况，将几种测试方法混合使用 ANSI／IEEE 1471-2000标准：[12] 在该标准中，视图上这一概念主要用于描述软件架构模型。在此基础上，通常采用 视角 描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。架构 则是对所有利益相关人关注点的响应和回答。 软件维护[11] ①正确性(改正性)维护。改正在系统开发阶段已发生而系统测试阶段尚未发现的错误。 ②适应性维护。在使用过程中，外部环境(新的硬、软件配置)、数据环境(数据库、数据格式、数据输入/输出方式、数据存储介质)可能发生变化。为使软件适应这种变化，而去修改软件的过程就称为适应性维护。 ③完善性维护。在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动称为完善性维护。 ④预防性维护。这是指为了适应未来的软硬件环境的变化，应主动增加预防性的新的功能，以使应用系统适应各类变化而不被淘汰。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-01-30 15:09:57 "},"13系统设计与分析方法.html":{"url":"13系统设计与分析方法.html","title":"13系统设计与分析方法","keywords":"","body":" 系统设计与分析方法 处理流程设计工具[15] 结构化分析方法[14] 系统设计与分析方法 [toc] 处理流程设计工具[15] 在处理流程设计过程中，为了更清晰地表达过程规则说明，陆续出现了一些用于表示处理流程的工具。 这些工具包括三类：图形工具、表格工具和语言工具。 其中常见的图形工具包括程序流程图PFD、IPO图、盒图、问题分析图、判定树，表格工具包括判定表，语言工具包括过程设计语言等。 程序流程图PFD：流程图中只能包括5种基本控制结构：顺序型、选择型、WHILE循环型(当型循环)、UNTIL循环型(直到型循环)和多分支选择型。 N-S图：N—S图容易表示嵌套关系和层次关系，并具有强烈的结构化特征。包括5种控制结构，分别是顺序型、选择型、WHILE循环型(当型循环)、UNTIL循环型(直到型循环)和多分支选择型，任何一个N-S图都是这5种基本控制结构相互组合与嵌套的结果。在N—S图中，过程的作用域明确；它没有箭头，不能随意转移控制；而且容易表示嵌套关系和层次关系；并具有强烈的结构化特征。但是当问题很复杂时，N—S图可能很大。 IPO图：其主体是处理过程说明，可以采用流程图、判定树、判定表、盒图、问题分析图或过程设计语言来进行描述。IPO图中的输入、输出与功能模块、文件及系统外部项都需要通过数据字典来描述，同时需要为其中的某些元素添加注释。 问题分析图PAD：问题分析图(PAD)包含5种基本控制结构，并允许递归使用。 过程设计语言：也称为结构化语言或伪代码(pseudo code)，它是一种混合语言，采用自然语言的词汇和结构化程序设计语言的语法，用于描述处理过程怎么做，类似于编程语言。过程设计语言用于描述模块中算法和加工逻辑的具体细节，以便在开发人员之间比较精确地进行交流。 判定表：对于具有多个互相联系的条件和可能产生多种结果的问题，用结构化语言描述则显得不够直观和紧凑，这时可以用以清楚、简明为特征的判定表(Decision Table)来描述。判定表采用表格形式来表达逻辑判断问题，表格分成4个部分，左上部分为条件说明，左下部分为行动说明，右上部分为各种条件的组合说明，右下部分为各条件组合下相应的行动。 判定树：用来表示逻辑判断问题的一种常用的图形工具，它用树来表达不同条件下的不同处理流程，比语言、表格的方式更为直观。判定树的左侧(称为树根)为加工名，中间是各种条件，所有的行动都列于最右侧。 结构化分析方法[14] 结构化方法分析模型的核心是数据字典，围绕这个核心，有三个层次的模型，分别是数据模型、功能模型和行为模型(也称为状态模型)。 在实际工作中，一般使用E-R图表示数据模型，用DFD表示功能模型，用状态转换图表示行为模型。 lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-01-30 15:10:04 "},"14专业英语.html":{"url":"14专业英语.html","title":"14专业英语","keywords":"","body":" 专业英语 [16、15] [14] [13] [12] [11] [10] [09] 专业英语 [toc] [16、15] The objective of( architecture design )is to determine what parts of the application software will be assigned to what hardware．The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate．All software systems can be divided into four basic functions．The first is( data storage )．Most information systems require data to be stored and retrieved，whether a small file，such as a memo produced by a word processor,or a large database，suc as one that stores an organization's accounting records．The second function is the( data access logic )，the processing required to access data，which often means database queries in Structured Query Language． The third function is the( application logic )，which is the logic documented in the DFDs．use cases．and functional requirements．The fourth function is the presentation logic，the display of information to the user and the acc印tance of the user's commands．The three primary hardware components of a system are( clients**，servers，and network** )． 架构设计的目标是确定应用软件的哪些部分将被分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是数据存储。大多数信息系统需要数据进行存储并检索，无论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是数据访问逻辑，处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是应用程序逻辑，这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是客户机、服务器和网络。 [14] Software architecture reconstruction is an interpretive，interactive，and iterative processincluding many activities．( Information extraction ) involves analyzing a system’S existing design and implementation artifacts to construct a model ofit．The result is used in the following activities to construct a view of the system．The database construction activity conveys the ( elements and relations ) contained in the view into a standard format for storage in a database．The ( view fusion ) activity involves defining and manipulating the information stored in database to reconcile，augment， and establish connections between the elements．Reconstruction consists of two primary activities： ( visualization and interaction ) and ( pattem definition and recognition )．The former provides a mechanism for the user to manipulate architectural elements，and the latter provides facilities for architecture reconstruction． 软件架构重构是一个解释性、交互式和反复迭代的过程，包括了多项活动。信息提取通过分析系统现有设计和实现工件来构造它的模型。其结果用于在后续活动中构造系统的视图。数据库构建活动把模型中包含的元素和关系转换为数据库中的标准存储格式。视图融合活动包括定义和操作数据库中存储的信息，理顺、加强并建立起元素之间的连接。重构由两个主要活动组成：可视化和交互记及模式定义和识别。前者提供了一种让用户操作架构元素的机制，后者则提供了用于架构重构的设施。 [13] A system’S architecture is a representation of a system in which there is a mapping of( functionality )onto hardware and software components，a mapping of the ( software architecture ) onto thehardware architecture，and a concern for the human interaction with these components．That is， system architecture is concerned with a total system，including hardware，software，and humans．Software architectural structures Can be divided into three maj or categories， depending on the broad nature ofthe elements they show．1) ( Module structures ) embody decisions as a set of code or data units that have to be constructed or procured．2) ( Component-and—connector structures ) embody decisions as to how the system is to be structured as set of elements that have runtime behavior and interactions．3) ( Allocation structures ) embody decisions as to how the system will relate to nonsoflware structures in its environment(such as CPUs，file systems，networks，development teams，etc．)． 系统架构是一个系统的一种表示，-包含了功能到软硬件构件的映射、软件架构到硬件架构的映射以及对于这些组件人机交互的关注。也就是说，系统架构关注于整个系统，包括硬件、软件和使用者。软件架构结构根据其所展示元素的广义性质，可以被分为三个主要类别。①模块结构将决策体现为一组需要被构建或采购的代码或数据单元。②构件连接器结构将决策体现为系统如何被结构化为一组具有运行时行为和交互的元素。③分配结构将决策体现为系统如何在其环境中关联到非软件结构，如CPU、文件系统、网络、开发团队等。 [12] An application architecture specifies the technologies to be used to implement one or more information systems．It serves as an outline for detailed design，construction，and implementation．Given the models and details，include ( logical DFDs and ERD ) ，we can distribute data and processes to create a general design of application architecture．The design will normally be constrained by architecture standards，project objectives，and ( the feasibility of techniques used ) ．The first physical DFD to be drawn is the ( network architecture DFD ) ．The next step is to distribute data stores to different processors．Data ( partitioning and replication ) are two types of distributed data which most RDBMSs support．There are many distribution options used in data distribution．In the case of ( storing specific tables on different servers ) ，we should record each table as a data store on the physical DFD and connect each to the appropriate server． 应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。 [11] Information systems design is defined as those tasks that focus on the specification of a detailed computer-based solution. Typically, there are four systems design tasks for in-house development. 1) The first task is to specify ( an application architecture ) ,which defines the technologies to be used by one, more, or all information systems in terms of their data, processes, interfaces, and network components. This task is accomplished by analyzing the data models and process models that are initially created during requirements analys16. 2) The next systems design task is to develop the ( database design specifications ) . The purpose of this task is to prepare technical design specifications for a database that will be adaptable to future requirements and expansion. 3) Once the database prototype has been built, the systems designer can work closely with system users to develop input, output and dialogue specifications. The ( internal controls ) must be specified to ensure that the outputs are not lost, misrouted, misused, or incomplete. 4) The fourth design task involves packaging all the specifications from the previous design tasks into a set of specifications that will guide the ( computer programmer’s ) activities during the following phases of the systems development methodology. Finally, we should ( reevaluate project feasibility ) and update the project plan accordingly. The key deliverable should include a detailed plan for the construction phase that should follow. [10] The software architecture is a set of software components, subsystems, relationships, interactions, the properties of each of these elements, and the set of guiding principles that together constitute the fundamental properties and constraints of a software system or set of systems. Architectural pattern defines a general set of element types and their interactions. The examples include Pipes and Filters, Model-View-Controller, and Reflection. A model in software architecture is a representation used to understand or document one or more aspects of a problem or solution. Architecture is usually used in conjunction with many adjunct terms. The business architecture defines the key strategies, organization, goals and related processes of the enterprise. At the enterprise level, the application architecture may be more of a set of guidelines on how the various software architectures should be constructed consistently across the enterprise. The reference architecture , which describes the high-level set of elements involved in application from a particular domain along with their interactions, is often used to focus on subsystem definition rather than application process level definition. [09] An architectural Style defines as a family of such systems in terms of a pattern of structural organization.More specifically an architectural style defines a vocabulary of components and connector types, and a set of constrains on how they can be combined. For many styles there may also exist one or more semantic modles that specify how to determine a system's overall properties from the properties of its parts. Many of architectural styles have been developed over the years.The best-known examples of pipe-and-filter architectures are programs written in the Unix shell． lisahust all right reserved，powered by Gitbook该文件最后修改时间： 2021-01-13 11:08:03 "}}